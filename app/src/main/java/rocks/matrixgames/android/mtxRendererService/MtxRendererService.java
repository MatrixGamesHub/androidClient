/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package rocks.matrixgames.android.mtxRendererService;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
public class MtxRendererService {

  public interface Iface {

    public void Ping() throws org.apache.thrift.TException;

    public void Shutdown() throws org.apache.thrift.TException;

    public void Freeze() throws org.apache.thrift.TException;

    public void Thaw() throws org.apache.thrift.TException;

    public void Pause() throws org.apache.thrift.TException;

    public void Resume() throws org.apache.thrift.TException;

    public void Clear() throws org.apache.thrift.TException;

    public Size GetPreferedFieldSize() throws org.apache.thrift.TException;

    public void LoadLevel(List<List<List<List<Short>>>> field, LevelInfo levelInfo) throws org.apache.thrift.TException;

    public void ResetLevel(List<List<List<List<Short>>>> field) throws org.apache.thrift.TException;

    public void Spawn(short objId, byte symbol, short positionX, short positionY) throws org.apache.thrift.TException;

    public void Remove(short objectId, short sourceId) throws org.apache.thrift.TException;

    public void Collect(short objectId, short sourceId) throws org.apache.thrift.TException;

    public void TriggerEnter(short objectId, short sourceId) throws org.apache.thrift.TException;

    public void TriggerLeave(short objectId, short sourceId) throws org.apache.thrift.TException;

    public void Move(short objectId, Direction direction, short fromX, short fromY, short toX, short toY) throws org.apache.thrift.TException;

    public void Jump(short objectId, Direction direction, short fromX, short fromY, short toX, short toY) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void Ping(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void Shutdown(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void Freeze(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void Thaw(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void Pause(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void Resume(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void Clear(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void GetPreferedFieldSize(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void LoadLevel(List<List<List<List<Short>>>> field, LevelInfo levelInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void ResetLevel(List<List<List<List<Short>>>> field, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void Spawn(short objId, byte symbol, short positionX, short positionY, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void Remove(short objectId, short sourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void Collect(short objectId, short sourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void TriggerEnter(short objectId, short sourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void TriggerLeave(short objectId, short sourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void Move(short objectId, Direction direction, short fromX, short fromY, short toX, short toY, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void Jump(short objectId, Direction direction, short fromX, short fromY, short toX, short toY, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void Ping() throws org.apache.thrift.TException
    {
      send_Ping();
      recv_Ping();
    }

    public void send_Ping() throws org.apache.thrift.TException
    {
      Ping_args args = new Ping_args();
      sendBase("Ping", args);
    }

    public void recv_Ping() throws org.apache.thrift.TException
    {
      Ping_result result = new Ping_result();
      receiveBase(result, "Ping");
      return;
    }

    public void Shutdown() throws org.apache.thrift.TException
    {
      send_Shutdown();
      recv_Shutdown();
    }

    public void send_Shutdown() throws org.apache.thrift.TException
    {
      Shutdown_args args = new Shutdown_args();
      sendBase("Shutdown", args);
    }

    public void recv_Shutdown() throws org.apache.thrift.TException
    {
      Shutdown_result result = new Shutdown_result();
      receiveBase(result, "Shutdown");
      return;
    }

    public void Freeze() throws org.apache.thrift.TException
    {
      send_Freeze();
      recv_Freeze();
    }

    public void send_Freeze() throws org.apache.thrift.TException
    {
      Freeze_args args = new Freeze_args();
      sendBase("Freeze", args);
    }

    public void recv_Freeze() throws org.apache.thrift.TException
    {
      Freeze_result result = new Freeze_result();
      receiveBase(result, "Freeze");
      return;
    }

    public void Thaw() throws org.apache.thrift.TException
    {
      send_Thaw();
      recv_Thaw();
    }

    public void send_Thaw() throws org.apache.thrift.TException
    {
      Thaw_args args = new Thaw_args();
      sendBase("Thaw", args);
    }

    public void recv_Thaw() throws org.apache.thrift.TException
    {
      Thaw_result result = new Thaw_result();
      receiveBase(result, "Thaw");
      return;
    }

    public void Pause() throws org.apache.thrift.TException
    {
      send_Pause();
      recv_Pause();
    }

    public void send_Pause() throws org.apache.thrift.TException
    {
      Pause_args args = new Pause_args();
      sendBase("Pause", args);
    }

    public void recv_Pause() throws org.apache.thrift.TException
    {
      Pause_result result = new Pause_result();
      receiveBase(result, "Pause");
      return;
    }

    public void Resume() throws org.apache.thrift.TException
    {
      send_Resume();
      recv_Resume();
    }

    public void send_Resume() throws org.apache.thrift.TException
    {
      Resume_args args = new Resume_args();
      sendBase("Resume", args);
    }

    public void recv_Resume() throws org.apache.thrift.TException
    {
      Resume_result result = new Resume_result();
      receiveBase(result, "Resume");
      return;
    }

    public void Clear() throws org.apache.thrift.TException
    {
      send_Clear();
      recv_Clear();
    }

    public void send_Clear() throws org.apache.thrift.TException
    {
      Clear_args args = new Clear_args();
      sendBase("Clear", args);
    }

    public void recv_Clear() throws org.apache.thrift.TException
    {
      Clear_result result = new Clear_result();
      receiveBase(result, "Clear");
      return;
    }

    public Size GetPreferedFieldSize() throws org.apache.thrift.TException
    {
      send_GetPreferedFieldSize();
      return recv_GetPreferedFieldSize();
    }

    public void send_GetPreferedFieldSize() throws org.apache.thrift.TException
    {
      GetPreferedFieldSize_args args = new GetPreferedFieldSize_args();
      sendBase("GetPreferedFieldSize", args);
    }

    public Size recv_GetPreferedFieldSize() throws org.apache.thrift.TException
    {
      GetPreferedFieldSize_result result = new GetPreferedFieldSize_result();
      receiveBase(result, "GetPreferedFieldSize");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetPreferedFieldSize failed: unknown result");
    }

    public void LoadLevel(List<List<List<List<Short>>>> field, LevelInfo levelInfo) throws org.apache.thrift.TException
    {
      send_LoadLevel(field, levelInfo);
      recv_LoadLevel();
    }

    public void send_LoadLevel(List<List<List<List<Short>>>> field, LevelInfo levelInfo) throws org.apache.thrift.TException
    {
      LoadLevel_args args = new LoadLevel_args();
      args.setField(field);
      args.setLevelInfo(levelInfo);
      sendBase("LoadLevel", args);
    }

    public void recv_LoadLevel() throws org.apache.thrift.TException
    {
      LoadLevel_result result = new LoadLevel_result();
      receiveBase(result, "LoadLevel");
      return;
    }

    public void ResetLevel(List<List<List<List<Short>>>> field) throws org.apache.thrift.TException
    {
      send_ResetLevel(field);
      recv_ResetLevel();
    }

    public void send_ResetLevel(List<List<List<List<Short>>>> field) throws org.apache.thrift.TException
    {
      ResetLevel_args args = new ResetLevel_args();
      args.setField(field);
      sendBase("ResetLevel", args);
    }

    public void recv_ResetLevel() throws org.apache.thrift.TException
    {
      ResetLevel_result result = new ResetLevel_result();
      receiveBase(result, "ResetLevel");
      return;
    }

    public void Spawn(short objId, byte symbol, short positionX, short positionY) throws org.apache.thrift.TException
    {
      send_Spawn(objId, symbol, positionX, positionY);
      recv_Spawn();
    }

    public void send_Spawn(short objId, byte symbol, short positionX, short positionY) throws org.apache.thrift.TException
    {
      Spawn_args args = new Spawn_args();
      args.setObjId(objId);
      args.setSymbol(symbol);
      args.setPositionX(positionX);
      args.setPositionY(positionY);
      sendBase("Spawn", args);
    }

    public void recv_Spawn() throws org.apache.thrift.TException
    {
      Spawn_result result = new Spawn_result();
      receiveBase(result, "Spawn");
      return;
    }

    public void Remove(short objectId, short sourceId) throws org.apache.thrift.TException
    {
      send_Remove(objectId, sourceId);
      recv_Remove();
    }

    public void send_Remove(short objectId, short sourceId) throws org.apache.thrift.TException
    {
      Remove_args args = new Remove_args();
      args.setObjectId(objectId);
      args.setSourceId(sourceId);
      sendBase("Remove", args);
    }

    public void recv_Remove() throws org.apache.thrift.TException
    {
      Remove_result result = new Remove_result();
      receiveBase(result, "Remove");
      return;
    }

    public void Collect(short objectId, short sourceId) throws org.apache.thrift.TException
    {
      send_Collect(objectId, sourceId);
      recv_Collect();
    }

    public void send_Collect(short objectId, short sourceId) throws org.apache.thrift.TException
    {
      Collect_args args = new Collect_args();
      args.setObjectId(objectId);
      args.setSourceId(sourceId);
      sendBase("Collect", args);
    }

    public void recv_Collect() throws org.apache.thrift.TException
    {
      Collect_result result = new Collect_result();
      receiveBase(result, "Collect");
      return;
    }

    public void TriggerEnter(short objectId, short sourceId) throws org.apache.thrift.TException
    {
      send_TriggerEnter(objectId, sourceId);
      recv_TriggerEnter();
    }

    public void send_TriggerEnter(short objectId, short sourceId) throws org.apache.thrift.TException
    {
      TriggerEnter_args args = new TriggerEnter_args();
      args.setObjectId(objectId);
      args.setSourceId(sourceId);
      sendBase("TriggerEnter", args);
    }

    public void recv_TriggerEnter() throws org.apache.thrift.TException
    {
      TriggerEnter_result result = new TriggerEnter_result();
      receiveBase(result, "TriggerEnter");
      return;
    }

    public void TriggerLeave(short objectId, short sourceId) throws org.apache.thrift.TException
    {
      send_TriggerLeave(objectId, sourceId);
      recv_TriggerLeave();
    }

    public void send_TriggerLeave(short objectId, short sourceId) throws org.apache.thrift.TException
    {
      TriggerLeave_args args = new TriggerLeave_args();
      args.setObjectId(objectId);
      args.setSourceId(sourceId);
      sendBase("TriggerLeave", args);
    }

    public void recv_TriggerLeave() throws org.apache.thrift.TException
    {
      TriggerLeave_result result = new TriggerLeave_result();
      receiveBase(result, "TriggerLeave");
      return;
    }

    public void Move(short objectId, Direction direction, short fromX, short fromY, short toX, short toY) throws org.apache.thrift.TException
    {
      send_Move(objectId, direction, fromX, fromY, toX, toY);
      recv_Move();
    }

    public void send_Move(short objectId, Direction direction, short fromX, short fromY, short toX, short toY) throws org.apache.thrift.TException
    {
      Move_args args = new Move_args();
      args.setObjectId(objectId);
      args.setDirection(direction);
      args.setFromX(fromX);
      args.setFromY(fromY);
      args.setToX(toX);
      args.setToY(toY);
      sendBase("Move", args);
    }

    public void recv_Move() throws org.apache.thrift.TException
    {
      Move_result result = new Move_result();
      receiveBase(result, "Move");
      return;
    }

    public void Jump(short objectId, Direction direction, short fromX, short fromY, short toX, short toY) throws org.apache.thrift.TException
    {
      send_Jump(objectId, direction, fromX, fromY, toX, toY);
      recv_Jump();
    }

    public void send_Jump(short objectId, Direction direction, short fromX, short fromY, short toX, short toY) throws org.apache.thrift.TException
    {
      Jump_args args = new Jump_args();
      args.setObjectId(objectId);
      args.setDirection(direction);
      args.setFromX(fromX);
      args.setFromY(fromY);
      args.setToX(toX);
      args.setToY(toY);
      sendBase("Jump", args);
    }

    public void recv_Jump() throws org.apache.thrift.TException
    {
      Jump_result result = new Jump_result();
      receiveBase(result, "Jump");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void Ping(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Ping_call method_call = new Ping_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Ping_call extends org.apache.thrift.async.TAsyncMethodCall {
      public Ping_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Ping_args args = new Ping_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Object getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_Ping();
        return null;
      }
    }

    public void Shutdown(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Shutdown_call method_call = new Shutdown_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Shutdown_call extends org.apache.thrift.async.TAsyncMethodCall {
      public Shutdown_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Shutdown", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Shutdown_args args = new Shutdown_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Object getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_Shutdown();
        return null;
      }
    }

    public void Freeze(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Freeze_call method_call = new Freeze_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Freeze_call extends org.apache.thrift.async.TAsyncMethodCall {
      public Freeze_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Freeze", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Freeze_args args = new Freeze_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Object getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_Freeze();
        return null;
      }
    }

    public void Thaw(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Thaw_call method_call = new Thaw_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Thaw_call extends org.apache.thrift.async.TAsyncMethodCall {
      public Thaw_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Thaw", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Thaw_args args = new Thaw_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Object getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_Thaw();
        return null;
      }
    }

    public void Pause(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Pause_call method_call = new Pause_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Pause_call extends org.apache.thrift.async.TAsyncMethodCall {
      public Pause_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Pause", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Pause_args args = new Pause_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Object getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_Pause();
        return null;
      }
    }

    public void Resume(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Resume_call method_call = new Resume_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Resume_call extends org.apache.thrift.async.TAsyncMethodCall {
      public Resume_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Resume", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Resume_args args = new Resume_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Object getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_Resume();
        return null;
      }
    }

    public void Clear(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Clear_call method_call = new Clear_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Clear_call extends org.apache.thrift.async.TAsyncMethodCall {
      public Clear_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Clear", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Clear_args args = new Clear_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Object getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_Clear();
        return null;
      }
    }

    public void GetPreferedFieldSize(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetPreferedFieldSize_call method_call = new GetPreferedFieldSize_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetPreferedFieldSize_call extends org.apache.thrift.async.TAsyncMethodCall {
      public GetPreferedFieldSize_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetPreferedFieldSize", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetPreferedFieldSize_args args = new GetPreferedFieldSize_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Size getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetPreferedFieldSize();
      }
    }

    public void LoadLevel(List<List<List<List<Short>>>> field, LevelInfo levelInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      LoadLevel_call method_call = new LoadLevel_call(field, levelInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class LoadLevel_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<List<List<List<Short>>>> field;
      private LevelInfo levelInfo;
      public LoadLevel_call(List<List<List<List<Short>>>> field, LevelInfo levelInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.field = field;
        this.levelInfo = levelInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("LoadLevel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        LoadLevel_args args = new LoadLevel_args();
        args.setField(field);
        args.setLevelInfo(levelInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Object getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_LoadLevel();
        return null;
      }
    }

    public void ResetLevel(List<List<List<List<Short>>>> field, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ResetLevel_call method_call = new ResetLevel_call(field, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ResetLevel_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<List<List<List<Short>>>> field;
      public ResetLevel_call(List<List<List<List<Short>>>> field, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.field = field;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ResetLevel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ResetLevel_args args = new ResetLevel_args();
        args.setField(field);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Object getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_ResetLevel();
        return null;
      }
    }

    public void Spawn(short objId, byte symbol, short positionX, short positionY, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Spawn_call method_call = new Spawn_call(objId, symbol, positionX, positionY, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Spawn_call extends org.apache.thrift.async.TAsyncMethodCall {
      private short objId;
      private byte symbol;
      private short positionX;
      private short positionY;
      public Spawn_call(short objId, byte symbol, short positionX, short positionY, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.objId = objId;
        this.symbol = symbol;
        this.positionX = positionX;
        this.positionY = positionY;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Spawn", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Spawn_args args = new Spawn_args();
        args.setObjId(objId);
        args.setSymbol(symbol);
        args.setPositionX(positionX);
        args.setPositionY(positionY);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Object getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_Spawn();
        return null;
      }
    }

    public void Remove(short objectId, short sourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Remove_call method_call = new Remove_call(objectId, sourceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Remove_call extends org.apache.thrift.async.TAsyncMethodCall {
      private short objectId;
      private short sourceId;
      public Remove_call(short objectId, short sourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.objectId = objectId;
        this.sourceId = sourceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Remove", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Remove_args args = new Remove_args();
        args.setObjectId(objectId);
        args.setSourceId(sourceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Object getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_Remove();
        return null;
      }
    }

    public void Collect(short objectId, short sourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Collect_call method_call = new Collect_call(objectId, sourceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Collect_call extends org.apache.thrift.async.TAsyncMethodCall {
      private short objectId;
      private short sourceId;
      public Collect_call(short objectId, short sourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.objectId = objectId;
        this.sourceId = sourceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Collect", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Collect_args args = new Collect_args();
        args.setObjectId(objectId);
        args.setSourceId(sourceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Object getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_Collect();
        return null;
      }
    }

    public void TriggerEnter(short objectId, short sourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      TriggerEnter_call method_call = new TriggerEnter_call(objectId, sourceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class TriggerEnter_call extends org.apache.thrift.async.TAsyncMethodCall {
      private short objectId;
      private short sourceId;
      public TriggerEnter_call(short objectId, short sourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.objectId = objectId;
        this.sourceId = sourceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("TriggerEnter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        TriggerEnter_args args = new TriggerEnter_args();
        args.setObjectId(objectId);
        args.setSourceId(sourceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Object getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_TriggerEnter();
        return null;
      }
    }

    public void TriggerLeave(short objectId, short sourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      TriggerLeave_call method_call = new TriggerLeave_call(objectId, sourceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class TriggerLeave_call extends org.apache.thrift.async.TAsyncMethodCall {
      private short objectId;
      private short sourceId;
      public TriggerLeave_call(short objectId, short sourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.objectId = objectId;
        this.sourceId = sourceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("TriggerLeave", org.apache.thrift.protocol.TMessageType.CALL, 0));
        TriggerLeave_args args = new TriggerLeave_args();
        args.setObjectId(objectId);
        args.setSourceId(sourceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Object getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_TriggerLeave();
        return null;
      }
    }

    public void Move(short objectId, Direction direction, short fromX, short fromY, short toX, short toY, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Move_call method_call = new Move_call(objectId, direction, fromX, fromY, toX, toY, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Move_call extends org.apache.thrift.async.TAsyncMethodCall {
      private short objectId;
      private Direction direction;
      private short fromX;
      private short fromY;
      private short toX;
      private short toY;
      public Move_call(short objectId, Direction direction, short fromX, short fromY, short toX, short toY, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.objectId = objectId;
        this.direction = direction;
        this.fromX = fromX;
        this.fromY = fromY;
        this.toX = toX;
        this.toY = toY;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Move", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Move_args args = new Move_args();
        args.setObjectId(objectId);
        args.setDirection(direction);
        args.setFromX(fromX);
        args.setFromY(fromY);
        args.setToX(toX);
        args.setToY(toY);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Object getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_Move();
        return null;
      }
    }

    public void Jump(short objectId, Direction direction, short fromX, short fromY, short toX, short toY, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Jump_call method_call = new Jump_call(objectId, direction, fromX, fromY, toX, toY, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Jump_call extends org.apache.thrift.async.TAsyncMethodCall {
      private short objectId;
      private Direction direction;
      private short fromX;
      private short fromY;
      private short toX;
      private short toY;
      public Jump_call(short objectId, Direction direction, short fromX, short fromY, short toX, short toY, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.objectId = objectId;
        this.direction = direction;
        this.fromX = fromX;
        this.fromY = fromY;
        this.toX = toX;
        this.toY = toY;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Jump", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Jump_args args = new Jump_args();
        args.setObjectId(objectId);
        args.setDirection(direction);
        args.setFromX(fromX);
        args.setFromY(fromY);
        args.setToX(toX);
        args.setToY(toY);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Object getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_Jump();
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("Ping", new Ping());
      processMap.put("Shutdown", new Shutdown());
      processMap.put("Freeze", new Freeze());
      processMap.put("Thaw", new Thaw());
      processMap.put("Pause", new Pause());
      processMap.put("Resume", new Resume());
      processMap.put("Clear", new Clear());
      processMap.put("GetPreferedFieldSize", new GetPreferedFieldSize());
      processMap.put("LoadLevel", new LoadLevel());
      processMap.put("ResetLevel", new ResetLevel());
      processMap.put("Spawn", new Spawn());
      processMap.put("Remove", new Remove());
      processMap.put("Collect", new Collect());
      processMap.put("TriggerEnter", new TriggerEnter());
      processMap.put("TriggerLeave", new TriggerLeave());
      processMap.put("Move", new Move());
      processMap.put("Jump", new Jump());
      return processMap;
    }

    public static class Ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Ping_args> {
      public Ping() {
        super("Ping");
      }

      public Ping_args getEmptyArgsInstance() {
        return new Ping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public Ping_result getResult(I iface, Ping_args args) throws org.apache.thrift.TException {
        Ping_result result = new Ping_result();
        iface.Ping();
        return result;
      }
    }

    public static class Shutdown<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Shutdown_args> {
      public Shutdown() {
        super("Shutdown");
      }

      public Shutdown_args getEmptyArgsInstance() {
        return new Shutdown_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public Shutdown_result getResult(I iface, Shutdown_args args) throws org.apache.thrift.TException {
        Shutdown_result result = new Shutdown_result();
        iface.Shutdown();
        return result;
      }
    }

    public static class Freeze<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Freeze_args> {
      public Freeze() {
        super("Freeze");
      }

      public Freeze_args getEmptyArgsInstance() {
        return new Freeze_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public Freeze_result getResult(I iface, Freeze_args args) throws org.apache.thrift.TException {
        Freeze_result result = new Freeze_result();
        iface.Freeze();
        return result;
      }
    }

    public static class Thaw<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Thaw_args> {
      public Thaw() {
        super("Thaw");
      }

      public Thaw_args getEmptyArgsInstance() {
        return new Thaw_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public Thaw_result getResult(I iface, Thaw_args args) throws org.apache.thrift.TException {
        Thaw_result result = new Thaw_result();
        iface.Thaw();
        return result;
      }
    }

    public static class Pause<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Pause_args> {
      public Pause() {
        super("Pause");
      }

      public Pause_args getEmptyArgsInstance() {
        return new Pause_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public Pause_result getResult(I iface, Pause_args args) throws org.apache.thrift.TException {
        Pause_result result = new Pause_result();
        iface.Pause();
        return result;
      }
    }

    public static class Resume<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Resume_args> {
      public Resume() {
        super("Resume");
      }

      public Resume_args getEmptyArgsInstance() {
        return new Resume_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public Resume_result getResult(I iface, Resume_args args) throws org.apache.thrift.TException {
        Resume_result result = new Resume_result();
        iface.Resume();
        return result;
      }
    }

    public static class Clear<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Clear_args> {
      public Clear() {
        super("Clear");
      }

      public Clear_args getEmptyArgsInstance() {
        return new Clear_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public Clear_result getResult(I iface, Clear_args args) throws org.apache.thrift.TException {
        Clear_result result = new Clear_result();
        iface.Clear();
        return result;
      }
    }

    public static class GetPreferedFieldSize<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetPreferedFieldSize_args> {
      public GetPreferedFieldSize() {
        super("GetPreferedFieldSize");
      }

      public GetPreferedFieldSize_args getEmptyArgsInstance() {
        return new GetPreferedFieldSize_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetPreferedFieldSize_result getResult(I iface, GetPreferedFieldSize_args args) throws org.apache.thrift.TException {
        GetPreferedFieldSize_result result = new GetPreferedFieldSize_result();
        result.success = iface.GetPreferedFieldSize();
        return result;
      }
    }

    public static class LoadLevel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, LoadLevel_args> {
      public LoadLevel() {
        super("LoadLevel");
      }

      public LoadLevel_args getEmptyArgsInstance() {
        return new LoadLevel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public LoadLevel_result getResult(I iface, LoadLevel_args args) throws org.apache.thrift.TException {
        LoadLevel_result result = new LoadLevel_result();
        iface.LoadLevel(args.field, args.levelInfo);
        return result;
      }
    }

    public static class ResetLevel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ResetLevel_args> {
      public ResetLevel() {
        super("ResetLevel");
      }

      public ResetLevel_args getEmptyArgsInstance() {
        return new ResetLevel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ResetLevel_result getResult(I iface, ResetLevel_args args) throws org.apache.thrift.TException {
        ResetLevel_result result = new ResetLevel_result();
        iface.ResetLevel(args.field);
        return result;
      }
    }

    public static class Spawn<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Spawn_args> {
      public Spawn() {
        super("Spawn");
      }

      public Spawn_args getEmptyArgsInstance() {
        return new Spawn_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public Spawn_result getResult(I iface, Spawn_args args) throws org.apache.thrift.TException {
        Spawn_result result = new Spawn_result();
        iface.Spawn(args.objId, args.symbol, args.positionX, args.positionY);
        return result;
      }
    }

    public static class Remove<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Remove_args> {
      public Remove() {
        super("Remove");
      }

      public Remove_args getEmptyArgsInstance() {
        return new Remove_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public Remove_result getResult(I iface, Remove_args args) throws org.apache.thrift.TException {
        Remove_result result = new Remove_result();
        iface.Remove(args.objectId, args.sourceId);
        return result;
      }
    }

    public static class Collect<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Collect_args> {
      public Collect() {
        super("Collect");
      }

      public Collect_args getEmptyArgsInstance() {
        return new Collect_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public Collect_result getResult(I iface, Collect_args args) throws org.apache.thrift.TException {
        Collect_result result = new Collect_result();
        iface.Collect(args.objectId, args.sourceId);
        return result;
      }
    }

    public static class TriggerEnter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, TriggerEnter_args> {
      public TriggerEnter() {
        super("TriggerEnter");
      }

      public TriggerEnter_args getEmptyArgsInstance() {
        return new TriggerEnter_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public TriggerEnter_result getResult(I iface, TriggerEnter_args args) throws org.apache.thrift.TException {
        TriggerEnter_result result = new TriggerEnter_result();
        iface.TriggerEnter(args.objectId, args.sourceId);
        return result;
      }
    }

    public static class TriggerLeave<I extends Iface> extends org.apache.thrift.ProcessFunction<I, TriggerLeave_args> {
      public TriggerLeave() {
        super("TriggerLeave");
      }

      public TriggerLeave_args getEmptyArgsInstance() {
        return new TriggerLeave_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public TriggerLeave_result getResult(I iface, TriggerLeave_args args) throws org.apache.thrift.TException {
        TriggerLeave_result result = new TriggerLeave_result();
        iface.TriggerLeave(args.objectId, args.sourceId);
        return result;
      }
    }

    public static class Move<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Move_args> {
      public Move() {
        super("Move");
      }

      public Move_args getEmptyArgsInstance() {
        return new Move_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public Move_result getResult(I iface, Move_args args) throws org.apache.thrift.TException {
        Move_result result = new Move_result();
        iface.Move(args.objectId, args.direction, args.fromX, args.fromY, args.toX, args.toY);
        return result;
      }
    }

    public static class Jump<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Jump_args> {
      public Jump() {
        super("Jump");
      }

      public Jump_args getEmptyArgsInstance() {
        return new Jump_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public Jump_result getResult(I iface, Jump_args args) throws org.apache.thrift.TException {
        Jump_result result = new Jump_result();
        iface.Jump(args.objectId, args.direction, args.fromX, args.fromY, args.toX, args.toY);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("Ping", new Ping());
      processMap.put("Shutdown", new Shutdown());
      processMap.put("Freeze", new Freeze());
      processMap.put("Thaw", new Thaw());
      processMap.put("Pause", new Pause());
      processMap.put("Resume", new Resume());
      processMap.put("Clear", new Clear());
      processMap.put("GetPreferedFieldSize", new GetPreferedFieldSize());
      processMap.put("LoadLevel", new LoadLevel());
      processMap.put("ResetLevel", new ResetLevel());
      processMap.put("Spawn", new Spawn());
      processMap.put("Remove", new Remove());
      processMap.put("Collect", new Collect());
      processMap.put("TriggerEnter", new TriggerEnter());
      processMap.put("TriggerLeave", new TriggerLeave());
      processMap.put("Move", new Move());
      processMap.put("Jump", new Jump());
      return processMap;
    }

    public static class Ping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Ping_args, Void> {
      public Ping() {
        super("Ping");
      }

      public Ping_args getEmptyArgsInstance() {
        return new Ping_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            Ping_result result = new Ping_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            Ping_result result = new Ping_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Ping_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.Ping(resultHandler);
      }
    }

    public static class Shutdown<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Shutdown_args, Void> {
      public Shutdown() {
        super("Shutdown");
      }

      public Shutdown_args getEmptyArgsInstance() {
        return new Shutdown_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            Shutdown_result result = new Shutdown_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            Shutdown_result result = new Shutdown_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Shutdown_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.Shutdown(resultHandler);
      }
    }

    public static class Freeze<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Freeze_args, Void> {
      public Freeze() {
        super("Freeze");
      }

      public Freeze_args getEmptyArgsInstance() {
        return new Freeze_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            Freeze_result result = new Freeze_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            Freeze_result result = new Freeze_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Freeze_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.Freeze(resultHandler);
      }
    }

    public static class Thaw<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Thaw_args, Void> {
      public Thaw() {
        super("Thaw");
      }

      public Thaw_args getEmptyArgsInstance() {
        return new Thaw_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            Thaw_result result = new Thaw_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            Thaw_result result = new Thaw_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Thaw_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.Thaw(resultHandler);
      }
    }

    public static class Pause<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Pause_args, Void> {
      public Pause() {
        super("Pause");
      }

      public Pause_args getEmptyArgsInstance() {
        return new Pause_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            Pause_result result = new Pause_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            Pause_result result = new Pause_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Pause_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.Pause(resultHandler);
      }
    }

    public static class Resume<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Resume_args, Void> {
      public Resume() {
        super("Resume");
      }

      public Resume_args getEmptyArgsInstance() {
        return new Resume_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            Resume_result result = new Resume_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            Resume_result result = new Resume_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Resume_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.Resume(resultHandler);
      }
    }

    public static class Clear<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Clear_args, Void> {
      public Clear() {
        super("Clear");
      }

      public Clear_args getEmptyArgsInstance() {
        return new Clear_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            Clear_result result = new Clear_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            Clear_result result = new Clear_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Clear_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.Clear(resultHandler);
      }
    }

    public static class GetPreferedFieldSize<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetPreferedFieldSize_args, Size> {
      public GetPreferedFieldSize() {
        super("GetPreferedFieldSize");
      }

      public GetPreferedFieldSize_args getEmptyArgsInstance() {
        return new GetPreferedFieldSize_args();
      }

      public AsyncMethodCallback<Size> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Size>() { 
          public void onComplete(Size o) {
            GetPreferedFieldSize_result result = new GetPreferedFieldSize_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetPreferedFieldSize_result result = new GetPreferedFieldSize_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetPreferedFieldSize_args args, org.apache.thrift.async.AsyncMethodCallback<Size> resultHandler) throws TException {
        iface.GetPreferedFieldSize(resultHandler);
      }
    }

    public static class LoadLevel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, LoadLevel_args, Void> {
      public LoadLevel() {
        super("LoadLevel");
      }

      public LoadLevel_args getEmptyArgsInstance() {
        return new LoadLevel_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            LoadLevel_result result = new LoadLevel_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            LoadLevel_result result = new LoadLevel_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, LoadLevel_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.LoadLevel(args.field, args.levelInfo,resultHandler);
      }
    }

    public static class ResetLevel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ResetLevel_args, Void> {
      public ResetLevel() {
        super("ResetLevel");
      }

      public ResetLevel_args getEmptyArgsInstance() {
        return new ResetLevel_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            ResetLevel_result result = new ResetLevel_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            ResetLevel_result result = new ResetLevel_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ResetLevel_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.ResetLevel(args.field,resultHandler);
      }
    }

    public static class Spawn<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Spawn_args, Void> {
      public Spawn() {
        super("Spawn");
      }

      public Spawn_args getEmptyArgsInstance() {
        return new Spawn_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            Spawn_result result = new Spawn_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            Spawn_result result = new Spawn_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Spawn_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.Spawn(args.objId, args.symbol, args.positionX, args.positionY,resultHandler);
      }
    }

    public static class Remove<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Remove_args, Void> {
      public Remove() {
        super("Remove");
      }

      public Remove_args getEmptyArgsInstance() {
        return new Remove_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            Remove_result result = new Remove_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            Remove_result result = new Remove_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Remove_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.Remove(args.objectId, args.sourceId,resultHandler);
      }
    }

    public static class Collect<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Collect_args, Void> {
      public Collect() {
        super("Collect");
      }

      public Collect_args getEmptyArgsInstance() {
        return new Collect_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            Collect_result result = new Collect_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            Collect_result result = new Collect_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Collect_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.Collect(args.objectId, args.sourceId,resultHandler);
      }
    }

    public static class TriggerEnter<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, TriggerEnter_args, Void> {
      public TriggerEnter() {
        super("TriggerEnter");
      }

      public TriggerEnter_args getEmptyArgsInstance() {
        return new TriggerEnter_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            TriggerEnter_result result = new TriggerEnter_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            TriggerEnter_result result = new TriggerEnter_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, TriggerEnter_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.TriggerEnter(args.objectId, args.sourceId,resultHandler);
      }
    }

    public static class TriggerLeave<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, TriggerLeave_args, Void> {
      public TriggerLeave() {
        super("TriggerLeave");
      }

      public TriggerLeave_args getEmptyArgsInstance() {
        return new TriggerLeave_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            TriggerLeave_result result = new TriggerLeave_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            TriggerLeave_result result = new TriggerLeave_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, TriggerLeave_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.TriggerLeave(args.objectId, args.sourceId,resultHandler);
      }
    }

    public static class Move<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Move_args, Void> {
      public Move() {
        super("Move");
      }

      public Move_args getEmptyArgsInstance() {
        return new Move_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            Move_result result = new Move_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            Move_result result = new Move_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Move_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.Move(args.objectId, args.direction, args.fromX, args.fromY, args.toX, args.toY,resultHandler);
      }
    }

    public static class Jump<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Jump_args, Void> {
      public Jump() {
        super("Jump");
      }

      public Jump_args getEmptyArgsInstance() {
        return new Jump_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            Jump_result result = new Jump_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            Jump_result result = new Jump_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Jump_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.Jump(args.objectId, args.direction, args.fromX, args.fromY, args.toX, args.toY,resultHandler);
      }
    }

  }

  public static class Ping_args implements org.apache.thrift.TBase<Ping_args, Ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<Ping_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Ping_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Ping_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Ping_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Ping_args.class, metaDataMap);
    }

    public Ping_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Ping_args(Ping_args other) {
    }

    public Ping_args deepCopy() {
      return new Ping_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Ping_args)
        return this.equals((Ping_args)that);
      return false;
    }

    public boolean equals(Ping_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(Ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Ping_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class Ping_argsStandardSchemeFactory implements SchemeFactory {
      public Ping_argsStandardScheme getScheme() {
        return new Ping_argsStandardScheme();
      }
    }

    private static class Ping_argsStandardScheme extends StandardScheme<Ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Ping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Ping_argsTupleSchemeFactory implements SchemeFactory {
      public Ping_argsTupleScheme getScheme() {
        return new Ping_argsTupleScheme();
      }
    }

    private static class Ping_argsTupleScheme extends TupleScheme<Ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class Ping_result implements org.apache.thrift.TBase<Ping_result, Ping_result._Fields>, java.io.Serializable, Cloneable, Comparable<Ping_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Ping_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Ping_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Ping_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Ping_result.class, metaDataMap);
    }

    public Ping_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Ping_result(Ping_result other) {
    }

    public Ping_result deepCopy() {
      return new Ping_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Ping_result)
        return this.equals((Ping_result)that);
      return false;
    }

    public boolean equals(Ping_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(Ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Ping_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class Ping_resultStandardSchemeFactory implements SchemeFactory {
      public Ping_resultStandardScheme getScheme() {
        return new Ping_resultStandardScheme();
      }
    }

    private static class Ping_resultStandardScheme extends StandardScheme<Ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Ping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Ping_resultTupleSchemeFactory implements SchemeFactory {
      public Ping_resultTupleScheme getScheme() {
        return new Ping_resultTupleScheme();
      }
    }

    private static class Ping_resultTupleScheme extends TupleScheme<Ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class Shutdown_args implements org.apache.thrift.TBase<Shutdown_args, Shutdown_args._Fields>, java.io.Serializable, Cloneable, Comparable<Shutdown_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Shutdown_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Shutdown_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Shutdown_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Shutdown_args.class, metaDataMap);
    }

    public Shutdown_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Shutdown_args(Shutdown_args other) {
    }

    public Shutdown_args deepCopy() {
      return new Shutdown_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Shutdown_args)
        return this.equals((Shutdown_args)that);
      return false;
    }

    public boolean equals(Shutdown_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(Shutdown_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Shutdown_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class Shutdown_argsStandardSchemeFactory implements SchemeFactory {
      public Shutdown_argsStandardScheme getScheme() {
        return new Shutdown_argsStandardScheme();
      }
    }

    private static class Shutdown_argsStandardScheme extends StandardScheme<Shutdown_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Shutdown_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Shutdown_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Shutdown_argsTupleSchemeFactory implements SchemeFactory {
      public Shutdown_argsTupleScheme getScheme() {
        return new Shutdown_argsTupleScheme();
      }
    }

    private static class Shutdown_argsTupleScheme extends TupleScheme<Shutdown_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Shutdown_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Shutdown_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class Shutdown_result implements org.apache.thrift.TBase<Shutdown_result, Shutdown_result._Fields>, java.io.Serializable, Cloneable, Comparable<Shutdown_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Shutdown_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Shutdown_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Shutdown_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Shutdown_result.class, metaDataMap);
    }

    public Shutdown_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Shutdown_result(Shutdown_result other) {
    }

    public Shutdown_result deepCopy() {
      return new Shutdown_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Shutdown_result)
        return this.equals((Shutdown_result)that);
      return false;
    }

    public boolean equals(Shutdown_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(Shutdown_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Shutdown_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class Shutdown_resultStandardSchemeFactory implements SchemeFactory {
      public Shutdown_resultStandardScheme getScheme() {
        return new Shutdown_resultStandardScheme();
      }
    }

    private static class Shutdown_resultStandardScheme extends StandardScheme<Shutdown_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Shutdown_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Shutdown_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Shutdown_resultTupleSchemeFactory implements SchemeFactory {
      public Shutdown_resultTupleScheme getScheme() {
        return new Shutdown_resultTupleScheme();
      }
    }

    private static class Shutdown_resultTupleScheme extends TupleScheme<Shutdown_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Shutdown_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Shutdown_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class Freeze_args implements org.apache.thrift.TBase<Freeze_args, Freeze_args._Fields>, java.io.Serializable, Cloneable, Comparable<Freeze_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Freeze_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Freeze_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Freeze_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Freeze_args.class, metaDataMap);
    }

    public Freeze_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Freeze_args(Freeze_args other) {
    }

    public Freeze_args deepCopy() {
      return new Freeze_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Freeze_args)
        return this.equals((Freeze_args)that);
      return false;
    }

    public boolean equals(Freeze_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(Freeze_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Freeze_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class Freeze_argsStandardSchemeFactory implements SchemeFactory {
      public Freeze_argsStandardScheme getScheme() {
        return new Freeze_argsStandardScheme();
      }
    }

    private static class Freeze_argsStandardScheme extends StandardScheme<Freeze_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Freeze_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Freeze_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Freeze_argsTupleSchemeFactory implements SchemeFactory {
      public Freeze_argsTupleScheme getScheme() {
        return new Freeze_argsTupleScheme();
      }
    }

    private static class Freeze_argsTupleScheme extends TupleScheme<Freeze_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Freeze_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Freeze_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class Freeze_result implements org.apache.thrift.TBase<Freeze_result, Freeze_result._Fields>, java.io.Serializable, Cloneable, Comparable<Freeze_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Freeze_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Freeze_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Freeze_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Freeze_result.class, metaDataMap);
    }

    public Freeze_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Freeze_result(Freeze_result other) {
    }

    public Freeze_result deepCopy() {
      return new Freeze_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Freeze_result)
        return this.equals((Freeze_result)that);
      return false;
    }

    public boolean equals(Freeze_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(Freeze_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Freeze_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class Freeze_resultStandardSchemeFactory implements SchemeFactory {
      public Freeze_resultStandardScheme getScheme() {
        return new Freeze_resultStandardScheme();
      }
    }

    private static class Freeze_resultStandardScheme extends StandardScheme<Freeze_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Freeze_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Freeze_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Freeze_resultTupleSchemeFactory implements SchemeFactory {
      public Freeze_resultTupleScheme getScheme() {
        return new Freeze_resultTupleScheme();
      }
    }

    private static class Freeze_resultTupleScheme extends TupleScheme<Freeze_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Freeze_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Freeze_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class Thaw_args implements org.apache.thrift.TBase<Thaw_args, Thaw_args._Fields>, java.io.Serializable, Cloneable, Comparable<Thaw_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Thaw_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Thaw_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Thaw_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Thaw_args.class, metaDataMap);
    }

    public Thaw_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Thaw_args(Thaw_args other) {
    }

    public Thaw_args deepCopy() {
      return new Thaw_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Thaw_args)
        return this.equals((Thaw_args)that);
      return false;
    }

    public boolean equals(Thaw_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(Thaw_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Thaw_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class Thaw_argsStandardSchemeFactory implements SchemeFactory {
      public Thaw_argsStandardScheme getScheme() {
        return new Thaw_argsStandardScheme();
      }
    }

    private static class Thaw_argsStandardScheme extends StandardScheme<Thaw_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Thaw_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Thaw_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Thaw_argsTupleSchemeFactory implements SchemeFactory {
      public Thaw_argsTupleScheme getScheme() {
        return new Thaw_argsTupleScheme();
      }
    }

    private static class Thaw_argsTupleScheme extends TupleScheme<Thaw_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Thaw_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Thaw_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class Thaw_result implements org.apache.thrift.TBase<Thaw_result, Thaw_result._Fields>, java.io.Serializable, Cloneable, Comparable<Thaw_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Thaw_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Thaw_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Thaw_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Thaw_result.class, metaDataMap);
    }

    public Thaw_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Thaw_result(Thaw_result other) {
    }

    public Thaw_result deepCopy() {
      return new Thaw_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Thaw_result)
        return this.equals((Thaw_result)that);
      return false;
    }

    public boolean equals(Thaw_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(Thaw_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Thaw_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class Thaw_resultStandardSchemeFactory implements SchemeFactory {
      public Thaw_resultStandardScheme getScheme() {
        return new Thaw_resultStandardScheme();
      }
    }

    private static class Thaw_resultStandardScheme extends StandardScheme<Thaw_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Thaw_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Thaw_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Thaw_resultTupleSchemeFactory implements SchemeFactory {
      public Thaw_resultTupleScheme getScheme() {
        return new Thaw_resultTupleScheme();
      }
    }

    private static class Thaw_resultTupleScheme extends TupleScheme<Thaw_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Thaw_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Thaw_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class Pause_args implements org.apache.thrift.TBase<Pause_args, Pause_args._Fields>, java.io.Serializable, Cloneable, Comparable<Pause_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Pause_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Pause_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Pause_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Pause_args.class, metaDataMap);
    }

    public Pause_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Pause_args(Pause_args other) {
    }

    public Pause_args deepCopy() {
      return new Pause_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Pause_args)
        return this.equals((Pause_args)that);
      return false;
    }

    public boolean equals(Pause_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(Pause_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Pause_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class Pause_argsStandardSchemeFactory implements SchemeFactory {
      public Pause_argsStandardScheme getScheme() {
        return new Pause_argsStandardScheme();
      }
    }

    private static class Pause_argsStandardScheme extends StandardScheme<Pause_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Pause_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Pause_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Pause_argsTupleSchemeFactory implements SchemeFactory {
      public Pause_argsTupleScheme getScheme() {
        return new Pause_argsTupleScheme();
      }
    }

    private static class Pause_argsTupleScheme extends TupleScheme<Pause_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Pause_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Pause_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class Pause_result implements org.apache.thrift.TBase<Pause_result, Pause_result._Fields>, java.io.Serializable, Cloneable, Comparable<Pause_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Pause_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Pause_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Pause_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Pause_result.class, metaDataMap);
    }

    public Pause_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Pause_result(Pause_result other) {
    }

    public Pause_result deepCopy() {
      return new Pause_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Pause_result)
        return this.equals((Pause_result)that);
      return false;
    }

    public boolean equals(Pause_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(Pause_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Pause_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class Pause_resultStandardSchemeFactory implements SchemeFactory {
      public Pause_resultStandardScheme getScheme() {
        return new Pause_resultStandardScheme();
      }
    }

    private static class Pause_resultStandardScheme extends StandardScheme<Pause_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Pause_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Pause_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Pause_resultTupleSchemeFactory implements SchemeFactory {
      public Pause_resultTupleScheme getScheme() {
        return new Pause_resultTupleScheme();
      }
    }

    private static class Pause_resultTupleScheme extends TupleScheme<Pause_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Pause_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Pause_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class Resume_args implements org.apache.thrift.TBase<Resume_args, Resume_args._Fields>, java.io.Serializable, Cloneable, Comparable<Resume_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Resume_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Resume_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Resume_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Resume_args.class, metaDataMap);
    }

    public Resume_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Resume_args(Resume_args other) {
    }

    public Resume_args deepCopy() {
      return new Resume_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Resume_args)
        return this.equals((Resume_args)that);
      return false;
    }

    public boolean equals(Resume_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(Resume_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Resume_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class Resume_argsStandardSchemeFactory implements SchemeFactory {
      public Resume_argsStandardScheme getScheme() {
        return new Resume_argsStandardScheme();
      }
    }

    private static class Resume_argsStandardScheme extends StandardScheme<Resume_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Resume_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Resume_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Resume_argsTupleSchemeFactory implements SchemeFactory {
      public Resume_argsTupleScheme getScheme() {
        return new Resume_argsTupleScheme();
      }
    }

    private static class Resume_argsTupleScheme extends TupleScheme<Resume_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Resume_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Resume_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class Resume_result implements org.apache.thrift.TBase<Resume_result, Resume_result._Fields>, java.io.Serializable, Cloneable, Comparable<Resume_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Resume_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Resume_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Resume_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Resume_result.class, metaDataMap);
    }

    public Resume_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Resume_result(Resume_result other) {
    }

    public Resume_result deepCopy() {
      return new Resume_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Resume_result)
        return this.equals((Resume_result)that);
      return false;
    }

    public boolean equals(Resume_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(Resume_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Resume_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class Resume_resultStandardSchemeFactory implements SchemeFactory {
      public Resume_resultStandardScheme getScheme() {
        return new Resume_resultStandardScheme();
      }
    }

    private static class Resume_resultStandardScheme extends StandardScheme<Resume_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Resume_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Resume_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Resume_resultTupleSchemeFactory implements SchemeFactory {
      public Resume_resultTupleScheme getScheme() {
        return new Resume_resultTupleScheme();
      }
    }

    private static class Resume_resultTupleScheme extends TupleScheme<Resume_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Resume_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Resume_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class Clear_args implements org.apache.thrift.TBase<Clear_args, Clear_args._Fields>, java.io.Serializable, Cloneable, Comparable<Clear_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Clear_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Clear_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Clear_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Clear_args.class, metaDataMap);
    }

    public Clear_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Clear_args(Clear_args other) {
    }

    public Clear_args deepCopy() {
      return new Clear_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Clear_args)
        return this.equals((Clear_args)that);
      return false;
    }

    public boolean equals(Clear_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(Clear_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Clear_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class Clear_argsStandardSchemeFactory implements SchemeFactory {
      public Clear_argsStandardScheme getScheme() {
        return new Clear_argsStandardScheme();
      }
    }

    private static class Clear_argsStandardScheme extends StandardScheme<Clear_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Clear_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Clear_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Clear_argsTupleSchemeFactory implements SchemeFactory {
      public Clear_argsTupleScheme getScheme() {
        return new Clear_argsTupleScheme();
      }
    }

    private static class Clear_argsTupleScheme extends TupleScheme<Clear_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Clear_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Clear_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class Clear_result implements org.apache.thrift.TBase<Clear_result, Clear_result._Fields>, java.io.Serializable, Cloneable, Comparable<Clear_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Clear_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Clear_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Clear_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Clear_result.class, metaDataMap);
    }

    public Clear_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Clear_result(Clear_result other) {
    }

    public Clear_result deepCopy() {
      return new Clear_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Clear_result)
        return this.equals((Clear_result)that);
      return false;
    }

    public boolean equals(Clear_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(Clear_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Clear_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class Clear_resultStandardSchemeFactory implements SchemeFactory {
      public Clear_resultStandardScheme getScheme() {
        return new Clear_resultStandardScheme();
      }
    }

    private static class Clear_resultStandardScheme extends StandardScheme<Clear_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Clear_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Clear_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Clear_resultTupleSchemeFactory implements SchemeFactory {
      public Clear_resultTupleScheme getScheme() {
        return new Clear_resultTupleScheme();
      }
    }

    private static class Clear_resultTupleScheme extends TupleScheme<Clear_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Clear_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Clear_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class GetPreferedFieldSize_args implements org.apache.thrift.TBase<GetPreferedFieldSize_args, GetPreferedFieldSize_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetPreferedFieldSize_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetPreferedFieldSize_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetPreferedFieldSize_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetPreferedFieldSize_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetPreferedFieldSize_args.class, metaDataMap);
    }

    public GetPreferedFieldSize_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetPreferedFieldSize_args(GetPreferedFieldSize_args other) {
    }

    public GetPreferedFieldSize_args deepCopy() {
      return new GetPreferedFieldSize_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetPreferedFieldSize_args)
        return this.equals((GetPreferedFieldSize_args)that);
      return false;
    }

    public boolean equals(GetPreferedFieldSize_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(GetPreferedFieldSize_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetPreferedFieldSize_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class GetPreferedFieldSize_argsStandardSchemeFactory implements SchemeFactory {
      public GetPreferedFieldSize_argsStandardScheme getScheme() {
        return new GetPreferedFieldSize_argsStandardScheme();
      }
    }

    private static class GetPreferedFieldSize_argsStandardScheme extends StandardScheme<GetPreferedFieldSize_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetPreferedFieldSize_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetPreferedFieldSize_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetPreferedFieldSize_argsTupleSchemeFactory implements SchemeFactory {
      public GetPreferedFieldSize_argsTupleScheme getScheme() {
        return new GetPreferedFieldSize_argsTupleScheme();
      }
    }

    private static class GetPreferedFieldSize_argsTupleScheme extends TupleScheme<GetPreferedFieldSize_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetPreferedFieldSize_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetPreferedFieldSize_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class GetPreferedFieldSize_result implements org.apache.thrift.TBase<GetPreferedFieldSize_result, GetPreferedFieldSize_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetPreferedFieldSize_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetPreferedFieldSize_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetPreferedFieldSize_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetPreferedFieldSize_resultTupleSchemeFactory());
    }

    public Size success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Size.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetPreferedFieldSize_result.class, metaDataMap);
    }

    public GetPreferedFieldSize_result() {
    }

    public GetPreferedFieldSize_result(
      Size success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetPreferedFieldSize_result(GetPreferedFieldSize_result other) {
      if (other.isSetSuccess()) {
        this.success = new Size(other.success);
      }
    }

    public GetPreferedFieldSize_result deepCopy() {
      return new GetPreferedFieldSize_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Size getSuccess() {
      return this.success;
    }

    public GetPreferedFieldSize_result setSuccess(Size success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Size)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetPreferedFieldSize_result)
        return this.equals((GetPreferedFieldSize_result)that);
      return false;
    }

    public boolean equals(GetPreferedFieldSize_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetPreferedFieldSize_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetPreferedFieldSize_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class GetPreferedFieldSize_resultStandardSchemeFactory implements SchemeFactory {
      public GetPreferedFieldSize_resultStandardScheme getScheme() {
        return new GetPreferedFieldSize_resultStandardScheme();
      }
    }

    private static class GetPreferedFieldSize_resultStandardScheme extends StandardScheme<GetPreferedFieldSize_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetPreferedFieldSize_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Size();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetPreferedFieldSize_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetPreferedFieldSize_resultTupleSchemeFactory implements SchemeFactory {
      public GetPreferedFieldSize_resultTupleScheme getScheme() {
        return new GetPreferedFieldSize_resultTupleScheme();
      }
    }

    private static class GetPreferedFieldSize_resultTupleScheme extends TupleScheme<GetPreferedFieldSize_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetPreferedFieldSize_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetPreferedFieldSize_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Size();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class LoadLevel_args implements org.apache.thrift.TBase<LoadLevel_args, LoadLevel_args._Fields>, java.io.Serializable, Cloneable, Comparable<LoadLevel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LoadLevel_args");

    private static final org.apache.thrift.protocol.TField FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("field", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField LEVEL_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("levelInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new LoadLevel_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new LoadLevel_argsTupleSchemeFactory());
    }

    public List<List<List<List<Short>>>> field; // required
    public LevelInfo levelInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FIELD((short)1, "field"),
      LEVEL_INFO((short)2, "levelInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FIELD
            return FIELD;
          case 2: // LEVEL_INFO
            return LEVEL_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FIELD, new org.apache.thrift.meta_data.FieldMetaData("field", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                      new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)))))));
      tmpMap.put(_Fields.LEVEL_INFO, new org.apache.thrift.meta_data.FieldMetaData("levelInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LevelInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LoadLevel_args.class, metaDataMap);
    }

    public LoadLevel_args() {
    }

    public LoadLevel_args(
      List<List<List<List<Short>>>> field,
      LevelInfo levelInfo)
    {
      this();
      this.field = field;
      this.levelInfo = levelInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public LoadLevel_args(LoadLevel_args other) {
      if (other.isSetField()) {
        List<List<List<List<Short>>>> __this__field = new ArrayList<List<List<List<Short>>>>(other.field.size());
        for (List<List<List<Short>>> other_element : other.field) {
          List<List<List<Short>>> __this__field_copy = new ArrayList<List<List<Short>>>(other_element.size());
          for (List<List<Short>> other_element_element : other_element) {
            List<List<Short>> __this__field_copy_copy = new ArrayList<List<Short>>(other_element_element.size());
            for (List<Short> other_element_element_element : other_element_element) {
              List<Short> __this__field_copy_copy_copy = new ArrayList<Short>(other_element_element_element);
              __this__field_copy_copy.add(__this__field_copy_copy_copy);
            }
            __this__field_copy.add(__this__field_copy_copy);
          }
          __this__field.add(__this__field_copy);
        }
        this.field = __this__field;
      }
      if (other.isSetLevelInfo()) {
        this.levelInfo = new LevelInfo(other.levelInfo);
      }
    }

    public LoadLevel_args deepCopy() {
      return new LoadLevel_args(this);
    }

    @Override
    public void clear() {
      this.field = null;
      this.levelInfo = null;
    }

    public int getFieldSize() {
      return (this.field == null) ? 0 : this.field.size();
    }

    public java.util.Iterator<List<List<List<Short>>>> getFieldIterator() {
      return (this.field == null) ? null : this.field.iterator();
    }

    public void addToField(List<List<List<Short>>> elem) {
      if (this.field == null) {
        this.field = new ArrayList<List<List<List<Short>>>>();
      }
      this.field.add(elem);
    }

    public List<List<List<List<Short>>>> getField() {
      return this.field;
    }

    public LoadLevel_args setField(List<List<List<List<Short>>>> field) {
      this.field = field;
      return this;
    }

    public void unsetField() {
      this.field = null;
    }

    /** Returns true if field field is set (has been assigned a value) and false otherwise */
    public boolean isSetField() {
      return this.field != null;
    }

    public void setFieldIsSet(boolean value) {
      if (!value) {
        this.field = null;
      }
    }

    public LevelInfo getLevelInfo() {
      return this.levelInfo;
    }

    public LoadLevel_args setLevelInfo(LevelInfo levelInfo) {
      this.levelInfo = levelInfo;
      return this;
    }

    public void unsetLevelInfo() {
      this.levelInfo = null;
    }

    /** Returns true if field levelInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetLevelInfo() {
      return this.levelInfo != null;
    }

    public void setLevelInfoIsSet(boolean value) {
      if (!value) {
        this.levelInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FIELD:
        if (value == null) {
          unsetField();
        } else {
          setField((List<List<List<List<Short>>>>)value);
        }
        break;

      case LEVEL_INFO:
        if (value == null) {
          unsetLevelInfo();
        } else {
          setLevelInfo((LevelInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FIELD:
        return getField();

      case LEVEL_INFO:
        return getLevelInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FIELD:
        return isSetField();
      case LEVEL_INFO:
        return isSetLevelInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof LoadLevel_args)
        return this.equals((LoadLevel_args)that);
      return false;
    }

    public boolean equals(LoadLevel_args that) {
      if (that == null)
        return false;

      boolean this_present_field = true && this.isSetField();
      boolean that_present_field = true && that.isSetField();
      if (this_present_field || that_present_field) {
        if (!(this_present_field && that_present_field))
          return false;
        if (!this.field.equals(that.field))
          return false;
      }

      boolean this_present_levelInfo = true && this.isSetLevelInfo();
      boolean that_present_levelInfo = true && that.isSetLevelInfo();
      if (this_present_levelInfo || that_present_levelInfo) {
        if (!(this_present_levelInfo && that_present_levelInfo))
          return false;
        if (!this.levelInfo.equals(that.levelInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_field = true && (isSetField());
      list.add(present_field);
      if (present_field)
        list.add(field);

      boolean present_levelInfo = true && (isSetLevelInfo());
      list.add(present_levelInfo);
      if (present_levelInfo)
        list.add(levelInfo);

      return list.hashCode();
    }

    @Override
    public int compareTo(LoadLevel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetField()).compareTo(other.isSetField());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetField()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field, other.field);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLevelInfo()).compareTo(other.isSetLevelInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLevelInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.levelInfo, other.levelInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("LoadLevel_args(");
      boolean first = true;

      sb.append("field:");
      if (this.field == null) {
        sb.append("null");
      } else {
        sb.append(this.field);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("levelInfo:");
      if (this.levelInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.levelInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (levelInfo != null) {
        levelInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class LoadLevel_argsStandardSchemeFactory implements SchemeFactory {
      public LoadLevel_argsStandardScheme getScheme() {
        return new LoadLevel_argsStandardScheme();
      }
    }

    private static class LoadLevel_argsStandardScheme extends StandardScheme<LoadLevel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, LoadLevel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FIELD
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.field = new ArrayList<List<List<List<Short>>>>(_list0.size);
                  List<List<List<Short>>> _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    {
                      org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                      _elem1 = new ArrayList<List<List<Short>>>(_list3.size);
                      List<List<Short>> _elem4;
                      for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                      {
                        {
                          org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                          _elem4 = new ArrayList<List<Short>>(_list6.size);
                          List<Short> _elem7;
                          for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                          {
                            {
                              org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                              _elem7 = new ArrayList<Short>(_list9.size);
                              short _elem10;
                              for (int _i11 = 0; _i11 < _list9.size; ++_i11)
                              {
                                _elem10 = iprot.readI16();
                                _elem7.add(_elem10);
                              }
                              iprot.readListEnd();
                            }
                            _elem4.add(_elem7);
                          }
                          iprot.readListEnd();
                        }
                        _elem1.add(_elem4);
                      }
                      iprot.readListEnd();
                    }
                    struct.field.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setFieldIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LEVEL_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.levelInfo = new LevelInfo();
                struct.levelInfo.read(iprot);
                struct.setLevelInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, LoadLevel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.field != null) {
          oprot.writeFieldBegin(FIELD_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.field.size()));
            for (List<List<List<Short>>> _iter12 : struct.field)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, _iter12.size()));
                for (List<List<Short>> _iter13 : _iter12)
                {
                  {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, _iter13.size()));
                    for (List<Short> _iter14 : _iter13)
                    {
                      {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, _iter14.size()));
                        for (short _iter15 : _iter14)
                        {
                          oprot.writeI16(_iter15);
                        }
                        oprot.writeListEnd();
                      }
                    }
                    oprot.writeListEnd();
                  }
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.levelInfo != null) {
          oprot.writeFieldBegin(LEVEL_INFO_FIELD_DESC);
          struct.levelInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class LoadLevel_argsTupleSchemeFactory implements SchemeFactory {
      public LoadLevel_argsTupleScheme getScheme() {
        return new LoadLevel_argsTupleScheme();
      }
    }

    private static class LoadLevel_argsTupleScheme extends TupleScheme<LoadLevel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, LoadLevel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetField()) {
          optionals.set(0);
        }
        if (struct.isSetLevelInfo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetField()) {
          {
            oprot.writeI32(struct.field.size());
            for (List<List<List<Short>>> _iter16 : struct.field)
            {
              {
                oprot.writeI32(_iter16.size());
                for (List<List<Short>> _iter17 : _iter16)
                {
                  {
                    oprot.writeI32(_iter17.size());
                    for (List<Short> _iter18 : _iter17)
                    {
                      {
                        oprot.writeI32(_iter18.size());
                        for (short _iter19 : _iter18)
                        {
                          oprot.writeI16(_iter19);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (struct.isSetLevelInfo()) {
          struct.levelInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, LoadLevel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list20 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.field = new ArrayList<List<List<List<Short>>>>(_list20.size);
            List<List<List<Short>>> _elem21;
            for (int _i22 = 0; _i22 < _list20.size; ++_i22)
            {
              {
                org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
                _elem21 = new ArrayList<List<List<Short>>>(_list23.size);
                List<List<Short>> _elem24;
                for (int _i25 = 0; _i25 < _list23.size; ++_i25)
                {
                  {
                    org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
                    _elem24 = new ArrayList<List<Short>>(_list26.size);
                    List<Short> _elem27;
                    for (int _i28 = 0; _i28 < _list26.size; ++_i28)
                    {
                      {
                        org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, iprot.readI32());
                        _elem27 = new ArrayList<Short>(_list29.size);
                        short _elem30;
                        for (int _i31 = 0; _i31 < _list29.size; ++_i31)
                        {
                          _elem30 = iprot.readI16();
                          _elem27.add(_elem30);
                        }
                      }
                      _elem24.add(_elem27);
                    }
                  }
                  _elem21.add(_elem24);
                }
              }
              struct.field.add(_elem21);
            }
          }
          struct.setFieldIsSet(true);
        }
        if (incoming.get(1)) {
          struct.levelInfo = new LevelInfo();
          struct.levelInfo.read(iprot);
          struct.setLevelInfoIsSet(true);
        }
      }
    }

  }

  public static class LoadLevel_result implements org.apache.thrift.TBase<LoadLevel_result, LoadLevel_result._Fields>, java.io.Serializable, Cloneable, Comparable<LoadLevel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LoadLevel_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new LoadLevel_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new LoadLevel_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LoadLevel_result.class, metaDataMap);
    }

    public LoadLevel_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public LoadLevel_result(LoadLevel_result other) {
    }

    public LoadLevel_result deepCopy() {
      return new LoadLevel_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof LoadLevel_result)
        return this.equals((LoadLevel_result)that);
      return false;
    }

    public boolean equals(LoadLevel_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(LoadLevel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("LoadLevel_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class LoadLevel_resultStandardSchemeFactory implements SchemeFactory {
      public LoadLevel_resultStandardScheme getScheme() {
        return new LoadLevel_resultStandardScheme();
      }
    }

    private static class LoadLevel_resultStandardScheme extends StandardScheme<LoadLevel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, LoadLevel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, LoadLevel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class LoadLevel_resultTupleSchemeFactory implements SchemeFactory {
      public LoadLevel_resultTupleScheme getScheme() {
        return new LoadLevel_resultTupleScheme();
      }
    }

    private static class LoadLevel_resultTupleScheme extends TupleScheme<LoadLevel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, LoadLevel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, LoadLevel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class ResetLevel_args implements org.apache.thrift.TBase<ResetLevel_args, ResetLevel_args._Fields>, java.io.Serializable, Cloneable, Comparable<ResetLevel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResetLevel_args");

    private static final org.apache.thrift.protocol.TField FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("field", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ResetLevel_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ResetLevel_argsTupleSchemeFactory());
    }

    public List<List<List<List<Short>>>> field; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FIELD((short)1, "field");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FIELD
            return FIELD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FIELD, new org.apache.thrift.meta_data.FieldMetaData("field", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                      new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)))))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResetLevel_args.class, metaDataMap);
    }

    public ResetLevel_args() {
    }

    public ResetLevel_args(
      List<List<List<List<Short>>>> field)
    {
      this();
      this.field = field;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ResetLevel_args(ResetLevel_args other) {
      if (other.isSetField()) {
        List<List<List<List<Short>>>> __this__field = new ArrayList<List<List<List<Short>>>>(other.field.size());
        for (List<List<List<Short>>> other_element : other.field) {
          List<List<List<Short>>> __this__field_copy = new ArrayList<List<List<Short>>>(other_element.size());
          for (List<List<Short>> other_element_element : other_element) {
            List<List<Short>> __this__field_copy_copy = new ArrayList<List<Short>>(other_element_element.size());
            for (List<Short> other_element_element_element : other_element_element) {
              List<Short> __this__field_copy_copy_copy = new ArrayList<Short>(other_element_element_element);
              __this__field_copy_copy.add(__this__field_copy_copy_copy);
            }
            __this__field_copy.add(__this__field_copy_copy);
          }
          __this__field.add(__this__field_copy);
        }
        this.field = __this__field;
      }
    }

    public ResetLevel_args deepCopy() {
      return new ResetLevel_args(this);
    }

    @Override
    public void clear() {
      this.field = null;
    }

    public int getFieldSize() {
      return (this.field == null) ? 0 : this.field.size();
    }

    public java.util.Iterator<List<List<List<Short>>>> getFieldIterator() {
      return (this.field == null) ? null : this.field.iterator();
    }

    public void addToField(List<List<List<Short>>> elem) {
      if (this.field == null) {
        this.field = new ArrayList<List<List<List<Short>>>>();
      }
      this.field.add(elem);
    }

    public List<List<List<List<Short>>>> getField() {
      return this.field;
    }

    public ResetLevel_args setField(List<List<List<List<Short>>>> field) {
      this.field = field;
      return this;
    }

    public void unsetField() {
      this.field = null;
    }

    /** Returns true if field field is set (has been assigned a value) and false otherwise */
    public boolean isSetField() {
      return this.field != null;
    }

    public void setFieldIsSet(boolean value) {
      if (!value) {
        this.field = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FIELD:
        if (value == null) {
          unsetField();
        } else {
          setField((List<List<List<List<Short>>>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FIELD:
        return getField();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FIELD:
        return isSetField();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ResetLevel_args)
        return this.equals((ResetLevel_args)that);
      return false;
    }

    public boolean equals(ResetLevel_args that) {
      if (that == null)
        return false;

      boolean this_present_field = true && this.isSetField();
      boolean that_present_field = true && that.isSetField();
      if (this_present_field || that_present_field) {
        if (!(this_present_field && that_present_field))
          return false;
        if (!this.field.equals(that.field))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_field = true && (isSetField());
      list.add(present_field);
      if (present_field)
        list.add(field);

      return list.hashCode();
    }

    @Override
    public int compareTo(ResetLevel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetField()).compareTo(other.isSetField());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetField()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field, other.field);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ResetLevel_args(");
      boolean first = true;

      sb.append("field:");
      if (this.field == null) {
        sb.append("null");
      } else {
        sb.append(this.field);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class ResetLevel_argsStandardSchemeFactory implements SchemeFactory {
      public ResetLevel_argsStandardScheme getScheme() {
        return new ResetLevel_argsStandardScheme();
      }
    }

    private static class ResetLevel_argsStandardScheme extends StandardScheme<ResetLevel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ResetLevel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FIELD
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.field = new ArrayList<List<List<List<Short>>>>(_list32.size);
                  List<List<List<Short>>> _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    {
                      org.apache.thrift.protocol.TList _list35 = iprot.readListBegin();
                      _elem33 = new ArrayList<List<List<Short>>>(_list35.size);
                      List<List<Short>> _elem36;
                      for (int _i37 = 0; _i37 < _list35.size; ++_i37)
                      {
                        {
                          org.apache.thrift.protocol.TList _list38 = iprot.readListBegin();
                          _elem36 = new ArrayList<List<Short>>(_list38.size);
                          List<Short> _elem39;
                          for (int _i40 = 0; _i40 < _list38.size; ++_i40)
                          {
                            {
                              org.apache.thrift.protocol.TList _list41 = iprot.readListBegin();
                              _elem39 = new ArrayList<Short>(_list41.size);
                              short _elem42;
                              for (int _i43 = 0; _i43 < _list41.size; ++_i43)
                              {
                                _elem42 = iprot.readI16();
                                _elem39.add(_elem42);
                              }
                              iprot.readListEnd();
                            }
                            _elem36.add(_elem39);
                          }
                          iprot.readListEnd();
                        }
                        _elem33.add(_elem36);
                      }
                      iprot.readListEnd();
                    }
                    struct.field.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setFieldIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ResetLevel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.field != null) {
          oprot.writeFieldBegin(FIELD_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.field.size()));
            for (List<List<List<Short>>> _iter44 : struct.field)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, _iter44.size()));
                for (List<List<Short>> _iter45 : _iter44)
                {
                  {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, _iter45.size()));
                    for (List<Short> _iter46 : _iter45)
                    {
                      {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, _iter46.size()));
                        for (short _iter47 : _iter46)
                        {
                          oprot.writeI16(_iter47);
                        }
                        oprot.writeListEnd();
                      }
                    }
                    oprot.writeListEnd();
                  }
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ResetLevel_argsTupleSchemeFactory implements SchemeFactory {
      public ResetLevel_argsTupleScheme getScheme() {
        return new ResetLevel_argsTupleScheme();
      }
    }

    private static class ResetLevel_argsTupleScheme extends TupleScheme<ResetLevel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ResetLevel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetField()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetField()) {
          {
            oprot.writeI32(struct.field.size());
            for (List<List<List<Short>>> _iter48 : struct.field)
            {
              {
                oprot.writeI32(_iter48.size());
                for (List<List<Short>> _iter49 : _iter48)
                {
                  {
                    oprot.writeI32(_iter49.size());
                    for (List<Short> _iter50 : _iter49)
                    {
                      {
                        oprot.writeI32(_iter50.size());
                        for (short _iter51 : _iter50)
                        {
                          oprot.writeI16(_iter51);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ResetLevel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list52 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.field = new ArrayList<List<List<List<Short>>>>(_list52.size);
            List<List<List<Short>>> _elem53;
            for (int _i54 = 0; _i54 < _list52.size; ++_i54)
            {
              {
                org.apache.thrift.protocol.TList _list55 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
                _elem53 = new ArrayList<List<List<Short>>>(_list55.size);
                List<List<Short>> _elem56;
                for (int _i57 = 0; _i57 < _list55.size; ++_i57)
                {
                  {
                    org.apache.thrift.protocol.TList _list58 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
                    _elem56 = new ArrayList<List<Short>>(_list58.size);
                    List<Short> _elem59;
                    for (int _i60 = 0; _i60 < _list58.size; ++_i60)
                    {
                      {
                        org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, iprot.readI32());
                        _elem59 = new ArrayList<Short>(_list61.size);
                        short _elem62;
                        for (int _i63 = 0; _i63 < _list61.size; ++_i63)
                        {
                          _elem62 = iprot.readI16();
                          _elem59.add(_elem62);
                        }
                      }
                      _elem56.add(_elem59);
                    }
                  }
                  _elem53.add(_elem56);
                }
              }
              struct.field.add(_elem53);
            }
          }
          struct.setFieldIsSet(true);
        }
      }
    }

  }

  public static class ResetLevel_result implements org.apache.thrift.TBase<ResetLevel_result, ResetLevel_result._Fields>, java.io.Serializable, Cloneable, Comparable<ResetLevel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResetLevel_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ResetLevel_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ResetLevel_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResetLevel_result.class, metaDataMap);
    }

    public ResetLevel_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ResetLevel_result(ResetLevel_result other) {
    }

    public ResetLevel_result deepCopy() {
      return new ResetLevel_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ResetLevel_result)
        return this.equals((ResetLevel_result)that);
      return false;
    }

    public boolean equals(ResetLevel_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(ResetLevel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ResetLevel_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class ResetLevel_resultStandardSchemeFactory implements SchemeFactory {
      public ResetLevel_resultStandardScheme getScheme() {
        return new ResetLevel_resultStandardScheme();
      }
    }

    private static class ResetLevel_resultStandardScheme extends StandardScheme<ResetLevel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ResetLevel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ResetLevel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ResetLevel_resultTupleSchemeFactory implements SchemeFactory {
      public ResetLevel_resultTupleScheme getScheme() {
        return new ResetLevel_resultTupleScheme();
      }
    }

    private static class ResetLevel_resultTupleScheme extends TupleScheme<ResetLevel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ResetLevel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ResetLevel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class Spawn_args implements org.apache.thrift.TBase<Spawn_args, Spawn_args._Fields>, java.io.Serializable, Cloneable, Comparable<Spawn_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Spawn_args");

    private static final org.apache.thrift.protocol.TField OBJ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("objId", org.apache.thrift.protocol.TType.I16, (short)1);
    private static final org.apache.thrift.protocol.TField SYMBOL_FIELD_DESC = new org.apache.thrift.protocol.TField("symbol", org.apache.thrift.protocol.TType.BYTE, (short)2);
    private static final org.apache.thrift.protocol.TField POSITION_X_FIELD_DESC = new org.apache.thrift.protocol.TField("positionX", org.apache.thrift.protocol.TType.I16, (short)3);
    private static final org.apache.thrift.protocol.TField POSITION_Y_FIELD_DESC = new org.apache.thrift.protocol.TField("positionY", org.apache.thrift.protocol.TType.I16, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Spawn_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Spawn_argsTupleSchemeFactory());
    }

    public short objId; // required
    public byte symbol; // required
    public short positionX; // required
    public short positionY; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OBJ_ID((short)1, "objId"),
      SYMBOL((short)2, "symbol"),
      POSITION_X((short)3, "positionX"),
      POSITION_Y((short)4, "positionY");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OBJ_ID
            return OBJ_ID;
          case 2: // SYMBOL
            return SYMBOL;
          case 3: // POSITION_X
            return POSITION_X;
          case 4: // POSITION_Y
            return POSITION_Y;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __OBJID_ISSET_ID = 0;
    private static final int __SYMBOL_ISSET_ID = 1;
    private static final int __POSITIONX_ISSET_ID = 2;
    private static final int __POSITIONY_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OBJ_ID, new org.apache.thrift.meta_data.FieldMetaData("objId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.SYMBOL, new org.apache.thrift.meta_data.FieldMetaData("symbol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields.POSITION_X, new org.apache.thrift.meta_data.FieldMetaData("positionX", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.POSITION_Y, new org.apache.thrift.meta_data.FieldMetaData("positionY", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Spawn_args.class, metaDataMap);
    }

    public Spawn_args() {
    }

    public Spawn_args(
      short objId,
      byte symbol,
      short positionX,
      short positionY)
    {
      this();
      this.objId = objId;
      setObjIdIsSet(true);
      this.symbol = symbol;
      setSymbolIsSet(true);
      this.positionX = positionX;
      setPositionXIsSet(true);
      this.positionY = positionY;
      setPositionYIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Spawn_args(Spawn_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.objId = other.objId;
      this.symbol = other.symbol;
      this.positionX = other.positionX;
      this.positionY = other.positionY;
    }

    public Spawn_args deepCopy() {
      return new Spawn_args(this);
    }

    @Override
    public void clear() {
      setObjIdIsSet(false);
      this.objId = 0;
      setSymbolIsSet(false);
      this.symbol = 0;
      setPositionXIsSet(false);
      this.positionX = 0;
      setPositionYIsSet(false);
      this.positionY = 0;
    }

    public short getObjId() {
      return this.objId;
    }

    public Spawn_args setObjId(short objId) {
      this.objId = objId;
      setObjIdIsSet(true);
      return this;
    }

    public void unsetObjId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OBJID_ISSET_ID);
    }

    /** Returns true if field objId is set (has been assigned a value) and false otherwise */
    public boolean isSetObjId() {
      return EncodingUtils.testBit(__isset_bitfield, __OBJID_ISSET_ID);
    }

    public void setObjIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OBJID_ISSET_ID, value);
    }

    public byte getSymbol() {
      return this.symbol;
    }

    public Spawn_args setSymbol(byte symbol) {
      this.symbol = symbol;
      setSymbolIsSet(true);
      return this;
    }

    public void unsetSymbol() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SYMBOL_ISSET_ID);
    }

    /** Returns true if field symbol is set (has been assigned a value) and false otherwise */
    public boolean isSetSymbol() {
      return EncodingUtils.testBit(__isset_bitfield, __SYMBOL_ISSET_ID);
    }

    public void setSymbolIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SYMBOL_ISSET_ID, value);
    }

    public short getPositionX() {
      return this.positionX;
    }

    public Spawn_args setPositionX(short positionX) {
      this.positionX = positionX;
      setPositionXIsSet(true);
      return this;
    }

    public void unsetPositionX() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITIONX_ISSET_ID);
    }

    /** Returns true if field positionX is set (has been assigned a value) and false otherwise */
    public boolean isSetPositionX() {
      return EncodingUtils.testBit(__isset_bitfield, __POSITIONX_ISSET_ID);
    }

    public void setPositionXIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITIONX_ISSET_ID, value);
    }

    public short getPositionY() {
      return this.positionY;
    }

    public Spawn_args setPositionY(short positionY) {
      this.positionY = positionY;
      setPositionYIsSet(true);
      return this;
    }

    public void unsetPositionY() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITIONY_ISSET_ID);
    }

    /** Returns true if field positionY is set (has been assigned a value) and false otherwise */
    public boolean isSetPositionY() {
      return EncodingUtils.testBit(__isset_bitfield, __POSITIONY_ISSET_ID);
    }

    public void setPositionYIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITIONY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OBJ_ID:
        if (value == null) {
          unsetObjId();
        } else {
          setObjId((Short)value);
        }
        break;

      case SYMBOL:
        if (value == null) {
          unsetSymbol();
        } else {
          setSymbol((Byte)value);
        }
        break;

      case POSITION_X:
        if (value == null) {
          unsetPositionX();
        } else {
          setPositionX((Short)value);
        }
        break;

      case POSITION_Y:
        if (value == null) {
          unsetPositionY();
        } else {
          setPositionY((Short)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OBJ_ID:
        return getObjId();

      case SYMBOL:
        return getSymbol();

      case POSITION_X:
        return getPositionX();

      case POSITION_Y:
        return getPositionY();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OBJ_ID:
        return isSetObjId();
      case SYMBOL:
        return isSetSymbol();
      case POSITION_X:
        return isSetPositionX();
      case POSITION_Y:
        return isSetPositionY();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Spawn_args)
        return this.equals((Spawn_args)that);
      return false;
    }

    public boolean equals(Spawn_args that) {
      if (that == null)
        return false;

      boolean this_present_objId = true;
      boolean that_present_objId = true;
      if (this_present_objId || that_present_objId) {
        if (!(this_present_objId && that_present_objId))
          return false;
        if (this.objId != that.objId)
          return false;
      }

      boolean this_present_symbol = true;
      boolean that_present_symbol = true;
      if (this_present_symbol || that_present_symbol) {
        if (!(this_present_symbol && that_present_symbol))
          return false;
        if (this.symbol != that.symbol)
          return false;
      }

      boolean this_present_positionX = true;
      boolean that_present_positionX = true;
      if (this_present_positionX || that_present_positionX) {
        if (!(this_present_positionX && that_present_positionX))
          return false;
        if (this.positionX != that.positionX)
          return false;
      }

      boolean this_present_positionY = true;
      boolean that_present_positionY = true;
      if (this_present_positionY || that_present_positionY) {
        if (!(this_present_positionY && that_present_positionY))
          return false;
        if (this.positionY != that.positionY)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_objId = true;
      list.add(present_objId);
      if (present_objId)
        list.add(objId);

      boolean present_symbol = true;
      list.add(present_symbol);
      if (present_symbol)
        list.add(symbol);

      boolean present_positionX = true;
      list.add(present_positionX);
      if (present_positionX)
        list.add(positionX);

      boolean present_positionY = true;
      list.add(present_positionY);
      if (present_positionY)
        list.add(positionY);

      return list.hashCode();
    }

    @Override
    public int compareTo(Spawn_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetObjId()).compareTo(other.isSetObjId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetObjId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.objId, other.objId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSymbol()).compareTo(other.isSetSymbol());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSymbol()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.symbol, other.symbol);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPositionX()).compareTo(other.isSetPositionX());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPositionX()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionX, other.positionX);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPositionY()).compareTo(other.isSetPositionY());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPositionY()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionY, other.positionY);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Spawn_args(");
      boolean first = true;

      sb.append("objId:");
      sb.append(this.objId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("symbol:");
      sb.append(this.symbol);
      first = false;
      if (!first) sb.append(", ");
      sb.append("positionX:");
      sb.append(this.positionX);
      first = false;
      if (!first) sb.append(", ");
      sb.append("positionY:");
      sb.append(this.positionY);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class Spawn_argsStandardSchemeFactory implements SchemeFactory {
      public Spawn_argsStandardScheme getScheme() {
        return new Spawn_argsStandardScheme();
      }
    }

    private static class Spawn_argsStandardScheme extends StandardScheme<Spawn_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Spawn_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OBJ_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.objId = iprot.readI16();
                struct.setObjIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SYMBOL
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct.symbol = iprot.readByte();
                struct.setSymbolIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // POSITION_X
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.positionX = iprot.readI16();
                struct.setPositionXIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // POSITION_Y
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.positionY = iprot.readI16();
                struct.setPositionYIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Spawn_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(OBJ_ID_FIELD_DESC);
        oprot.writeI16(struct.objId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SYMBOL_FIELD_DESC);
        oprot.writeByte(struct.symbol);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(POSITION_X_FIELD_DESC);
        oprot.writeI16(struct.positionX);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(POSITION_Y_FIELD_DESC);
        oprot.writeI16(struct.positionY);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Spawn_argsTupleSchemeFactory implements SchemeFactory {
      public Spawn_argsTupleScheme getScheme() {
        return new Spawn_argsTupleScheme();
      }
    }

    private static class Spawn_argsTupleScheme extends TupleScheme<Spawn_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Spawn_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetObjId()) {
          optionals.set(0);
        }
        if (struct.isSetSymbol()) {
          optionals.set(1);
        }
        if (struct.isSetPositionX()) {
          optionals.set(2);
        }
        if (struct.isSetPositionY()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetObjId()) {
          oprot.writeI16(struct.objId);
        }
        if (struct.isSetSymbol()) {
          oprot.writeByte(struct.symbol);
        }
        if (struct.isSetPositionX()) {
          oprot.writeI16(struct.positionX);
        }
        if (struct.isSetPositionY()) {
          oprot.writeI16(struct.positionY);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Spawn_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.objId = iprot.readI16();
          struct.setObjIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.symbol = iprot.readByte();
          struct.setSymbolIsSet(true);
        }
        if (incoming.get(2)) {
          struct.positionX = iprot.readI16();
          struct.setPositionXIsSet(true);
        }
        if (incoming.get(3)) {
          struct.positionY = iprot.readI16();
          struct.setPositionYIsSet(true);
        }
      }
    }

  }

  public static class Spawn_result implements org.apache.thrift.TBase<Spawn_result, Spawn_result._Fields>, java.io.Serializable, Cloneable, Comparable<Spawn_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Spawn_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Spawn_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Spawn_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Spawn_result.class, metaDataMap);
    }

    public Spawn_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Spawn_result(Spawn_result other) {
    }

    public Spawn_result deepCopy() {
      return new Spawn_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Spawn_result)
        return this.equals((Spawn_result)that);
      return false;
    }

    public boolean equals(Spawn_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(Spawn_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Spawn_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class Spawn_resultStandardSchemeFactory implements SchemeFactory {
      public Spawn_resultStandardScheme getScheme() {
        return new Spawn_resultStandardScheme();
      }
    }

    private static class Spawn_resultStandardScheme extends StandardScheme<Spawn_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Spawn_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Spawn_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Spawn_resultTupleSchemeFactory implements SchemeFactory {
      public Spawn_resultTupleScheme getScheme() {
        return new Spawn_resultTupleScheme();
      }
    }

    private static class Spawn_resultTupleScheme extends TupleScheme<Spawn_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Spawn_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Spawn_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class Remove_args implements org.apache.thrift.TBase<Remove_args, Remove_args._Fields>, java.io.Serializable, Cloneable, Comparable<Remove_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Remove_args");

    private static final org.apache.thrift.protocol.TField OBJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("objectId", org.apache.thrift.protocol.TType.I16, (short)1);
    private static final org.apache.thrift.protocol.TField SOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceId", org.apache.thrift.protocol.TType.I16, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Remove_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Remove_argsTupleSchemeFactory());
    }

    public short objectId; // required
    public short sourceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OBJECT_ID((short)1, "objectId"),
      SOURCE_ID((short)2, "sourceId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OBJECT_ID
            return OBJECT_ID;
          case 2: // SOURCE_ID
            return SOURCE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __OBJECTID_ISSET_ID = 0;
    private static final int __SOURCEID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OBJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("objectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.SOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("sourceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Remove_args.class, metaDataMap);
    }

    public Remove_args() {
    }

    public Remove_args(
      short objectId,
      short sourceId)
    {
      this();
      this.objectId = objectId;
      setObjectIdIsSet(true);
      this.sourceId = sourceId;
      setSourceIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Remove_args(Remove_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.objectId = other.objectId;
      this.sourceId = other.sourceId;
    }

    public Remove_args deepCopy() {
      return new Remove_args(this);
    }

    @Override
    public void clear() {
      setObjectIdIsSet(false);
      this.objectId = 0;
      setSourceIdIsSet(false);
      this.sourceId = 0;
    }

    public short getObjectId() {
      return this.objectId;
    }

    public Remove_args setObjectId(short objectId) {
      this.objectId = objectId;
      setObjectIdIsSet(true);
      return this;
    }

    public void unsetObjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OBJECTID_ISSET_ID);
    }

    /** Returns true if field objectId is set (has been assigned a value) and false otherwise */
    public boolean isSetObjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __OBJECTID_ISSET_ID);
    }

    public void setObjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OBJECTID_ISSET_ID, value);
    }

    public short getSourceId() {
      return this.sourceId;
    }

    public Remove_args setSourceId(short sourceId) {
      this.sourceId = sourceId;
      setSourceIdIsSet(true);
      return this;
    }

    public void unsetSourceId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SOURCEID_ISSET_ID);
    }

    /** Returns true if field sourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetSourceId() {
      return EncodingUtils.testBit(__isset_bitfield, __SOURCEID_ISSET_ID);
    }

    public void setSourceIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SOURCEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OBJECT_ID:
        if (value == null) {
          unsetObjectId();
        } else {
          setObjectId((Short)value);
        }
        break;

      case SOURCE_ID:
        if (value == null) {
          unsetSourceId();
        } else {
          setSourceId((Short)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OBJECT_ID:
        return getObjectId();

      case SOURCE_ID:
        return getSourceId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OBJECT_ID:
        return isSetObjectId();
      case SOURCE_ID:
        return isSetSourceId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Remove_args)
        return this.equals((Remove_args)that);
      return false;
    }

    public boolean equals(Remove_args that) {
      if (that == null)
        return false;

      boolean this_present_objectId = true;
      boolean that_present_objectId = true;
      if (this_present_objectId || that_present_objectId) {
        if (!(this_present_objectId && that_present_objectId))
          return false;
        if (this.objectId != that.objectId)
          return false;
      }

      boolean this_present_sourceId = true;
      boolean that_present_sourceId = true;
      if (this_present_sourceId || that_present_sourceId) {
        if (!(this_present_sourceId && that_present_sourceId))
          return false;
        if (this.sourceId != that.sourceId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_objectId = true;
      list.add(present_objectId);
      if (present_objectId)
        list.add(objectId);

      boolean present_sourceId = true;
      list.add(present_sourceId);
      if (present_sourceId)
        list.add(sourceId);

      return list.hashCode();
    }

    @Override
    public int compareTo(Remove_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetObjectId()).compareTo(other.isSetObjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetObjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.objectId, other.objectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSourceId()).compareTo(other.isSetSourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceId, other.sourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Remove_args(");
      boolean first = true;

      sb.append("objectId:");
      sb.append(this.objectId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sourceId:");
      sb.append(this.sourceId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class Remove_argsStandardSchemeFactory implements SchemeFactory {
      public Remove_argsStandardScheme getScheme() {
        return new Remove_argsStandardScheme();
      }
    }

    private static class Remove_argsStandardScheme extends StandardScheme<Remove_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Remove_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OBJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.objectId = iprot.readI16();
                struct.setObjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SOURCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.sourceId = iprot.readI16();
                struct.setSourceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Remove_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(OBJECT_ID_FIELD_DESC);
        oprot.writeI16(struct.objectId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SOURCE_ID_FIELD_DESC);
        oprot.writeI16(struct.sourceId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Remove_argsTupleSchemeFactory implements SchemeFactory {
      public Remove_argsTupleScheme getScheme() {
        return new Remove_argsTupleScheme();
      }
    }

    private static class Remove_argsTupleScheme extends TupleScheme<Remove_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Remove_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetObjectId()) {
          optionals.set(0);
        }
        if (struct.isSetSourceId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetObjectId()) {
          oprot.writeI16(struct.objectId);
        }
        if (struct.isSetSourceId()) {
          oprot.writeI16(struct.sourceId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Remove_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.objectId = iprot.readI16();
          struct.setObjectIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sourceId = iprot.readI16();
          struct.setSourceIdIsSet(true);
        }
      }
    }

  }

  public static class Remove_result implements org.apache.thrift.TBase<Remove_result, Remove_result._Fields>, java.io.Serializable, Cloneable, Comparable<Remove_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Remove_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Remove_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Remove_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Remove_result.class, metaDataMap);
    }

    public Remove_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Remove_result(Remove_result other) {
    }

    public Remove_result deepCopy() {
      return new Remove_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Remove_result)
        return this.equals((Remove_result)that);
      return false;
    }

    public boolean equals(Remove_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(Remove_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Remove_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class Remove_resultStandardSchemeFactory implements SchemeFactory {
      public Remove_resultStandardScheme getScheme() {
        return new Remove_resultStandardScheme();
      }
    }

    private static class Remove_resultStandardScheme extends StandardScheme<Remove_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Remove_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Remove_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Remove_resultTupleSchemeFactory implements SchemeFactory {
      public Remove_resultTupleScheme getScheme() {
        return new Remove_resultTupleScheme();
      }
    }

    private static class Remove_resultTupleScheme extends TupleScheme<Remove_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Remove_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Remove_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class Collect_args implements org.apache.thrift.TBase<Collect_args, Collect_args._Fields>, java.io.Serializable, Cloneable, Comparable<Collect_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Collect_args");

    private static final org.apache.thrift.protocol.TField OBJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("objectId", org.apache.thrift.protocol.TType.I16, (short)1);
    private static final org.apache.thrift.protocol.TField SOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceId", org.apache.thrift.protocol.TType.I16, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Collect_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Collect_argsTupleSchemeFactory());
    }

    public short objectId; // required
    public short sourceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OBJECT_ID((short)1, "objectId"),
      SOURCE_ID((short)2, "sourceId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OBJECT_ID
            return OBJECT_ID;
          case 2: // SOURCE_ID
            return SOURCE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __OBJECTID_ISSET_ID = 0;
    private static final int __SOURCEID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OBJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("objectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.SOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("sourceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Collect_args.class, metaDataMap);
    }

    public Collect_args() {
    }

    public Collect_args(
      short objectId,
      short sourceId)
    {
      this();
      this.objectId = objectId;
      setObjectIdIsSet(true);
      this.sourceId = sourceId;
      setSourceIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Collect_args(Collect_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.objectId = other.objectId;
      this.sourceId = other.sourceId;
    }

    public Collect_args deepCopy() {
      return new Collect_args(this);
    }

    @Override
    public void clear() {
      setObjectIdIsSet(false);
      this.objectId = 0;
      setSourceIdIsSet(false);
      this.sourceId = 0;
    }

    public short getObjectId() {
      return this.objectId;
    }

    public Collect_args setObjectId(short objectId) {
      this.objectId = objectId;
      setObjectIdIsSet(true);
      return this;
    }

    public void unsetObjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OBJECTID_ISSET_ID);
    }

    /** Returns true if field objectId is set (has been assigned a value) and false otherwise */
    public boolean isSetObjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __OBJECTID_ISSET_ID);
    }

    public void setObjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OBJECTID_ISSET_ID, value);
    }

    public short getSourceId() {
      return this.sourceId;
    }

    public Collect_args setSourceId(short sourceId) {
      this.sourceId = sourceId;
      setSourceIdIsSet(true);
      return this;
    }

    public void unsetSourceId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SOURCEID_ISSET_ID);
    }

    /** Returns true if field sourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetSourceId() {
      return EncodingUtils.testBit(__isset_bitfield, __SOURCEID_ISSET_ID);
    }

    public void setSourceIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SOURCEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OBJECT_ID:
        if (value == null) {
          unsetObjectId();
        } else {
          setObjectId((Short)value);
        }
        break;

      case SOURCE_ID:
        if (value == null) {
          unsetSourceId();
        } else {
          setSourceId((Short)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OBJECT_ID:
        return getObjectId();

      case SOURCE_ID:
        return getSourceId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OBJECT_ID:
        return isSetObjectId();
      case SOURCE_ID:
        return isSetSourceId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Collect_args)
        return this.equals((Collect_args)that);
      return false;
    }

    public boolean equals(Collect_args that) {
      if (that == null)
        return false;

      boolean this_present_objectId = true;
      boolean that_present_objectId = true;
      if (this_present_objectId || that_present_objectId) {
        if (!(this_present_objectId && that_present_objectId))
          return false;
        if (this.objectId != that.objectId)
          return false;
      }

      boolean this_present_sourceId = true;
      boolean that_present_sourceId = true;
      if (this_present_sourceId || that_present_sourceId) {
        if (!(this_present_sourceId && that_present_sourceId))
          return false;
        if (this.sourceId != that.sourceId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_objectId = true;
      list.add(present_objectId);
      if (present_objectId)
        list.add(objectId);

      boolean present_sourceId = true;
      list.add(present_sourceId);
      if (present_sourceId)
        list.add(sourceId);

      return list.hashCode();
    }

    @Override
    public int compareTo(Collect_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetObjectId()).compareTo(other.isSetObjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetObjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.objectId, other.objectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSourceId()).compareTo(other.isSetSourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceId, other.sourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Collect_args(");
      boolean first = true;

      sb.append("objectId:");
      sb.append(this.objectId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sourceId:");
      sb.append(this.sourceId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class Collect_argsStandardSchemeFactory implements SchemeFactory {
      public Collect_argsStandardScheme getScheme() {
        return new Collect_argsStandardScheme();
      }
    }

    private static class Collect_argsStandardScheme extends StandardScheme<Collect_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Collect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OBJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.objectId = iprot.readI16();
                struct.setObjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SOURCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.sourceId = iprot.readI16();
                struct.setSourceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Collect_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(OBJECT_ID_FIELD_DESC);
        oprot.writeI16(struct.objectId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SOURCE_ID_FIELD_DESC);
        oprot.writeI16(struct.sourceId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Collect_argsTupleSchemeFactory implements SchemeFactory {
      public Collect_argsTupleScheme getScheme() {
        return new Collect_argsTupleScheme();
      }
    }

    private static class Collect_argsTupleScheme extends TupleScheme<Collect_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Collect_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetObjectId()) {
          optionals.set(0);
        }
        if (struct.isSetSourceId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetObjectId()) {
          oprot.writeI16(struct.objectId);
        }
        if (struct.isSetSourceId()) {
          oprot.writeI16(struct.sourceId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Collect_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.objectId = iprot.readI16();
          struct.setObjectIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sourceId = iprot.readI16();
          struct.setSourceIdIsSet(true);
        }
      }
    }

  }

  public static class Collect_result implements org.apache.thrift.TBase<Collect_result, Collect_result._Fields>, java.io.Serializable, Cloneable, Comparable<Collect_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Collect_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Collect_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Collect_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Collect_result.class, metaDataMap);
    }

    public Collect_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Collect_result(Collect_result other) {
    }

    public Collect_result deepCopy() {
      return new Collect_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Collect_result)
        return this.equals((Collect_result)that);
      return false;
    }

    public boolean equals(Collect_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(Collect_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Collect_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class Collect_resultStandardSchemeFactory implements SchemeFactory {
      public Collect_resultStandardScheme getScheme() {
        return new Collect_resultStandardScheme();
      }
    }

    private static class Collect_resultStandardScheme extends StandardScheme<Collect_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Collect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Collect_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Collect_resultTupleSchemeFactory implements SchemeFactory {
      public Collect_resultTupleScheme getScheme() {
        return new Collect_resultTupleScheme();
      }
    }

    private static class Collect_resultTupleScheme extends TupleScheme<Collect_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Collect_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Collect_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class TriggerEnter_args implements org.apache.thrift.TBase<TriggerEnter_args, TriggerEnter_args._Fields>, java.io.Serializable, Cloneable, Comparable<TriggerEnter_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TriggerEnter_args");

    private static final org.apache.thrift.protocol.TField OBJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("objectId", org.apache.thrift.protocol.TType.I16, (short)1);
    private static final org.apache.thrift.protocol.TField SOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceId", org.apache.thrift.protocol.TType.I16, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new TriggerEnter_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new TriggerEnter_argsTupleSchemeFactory());
    }

    public short objectId; // required
    public short sourceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OBJECT_ID((short)1, "objectId"),
      SOURCE_ID((short)2, "sourceId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OBJECT_ID
            return OBJECT_ID;
          case 2: // SOURCE_ID
            return SOURCE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __OBJECTID_ISSET_ID = 0;
    private static final int __SOURCEID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OBJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("objectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.SOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("sourceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TriggerEnter_args.class, metaDataMap);
    }

    public TriggerEnter_args() {
    }

    public TriggerEnter_args(
      short objectId,
      short sourceId)
    {
      this();
      this.objectId = objectId;
      setObjectIdIsSet(true);
      this.sourceId = sourceId;
      setSourceIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TriggerEnter_args(TriggerEnter_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.objectId = other.objectId;
      this.sourceId = other.sourceId;
    }

    public TriggerEnter_args deepCopy() {
      return new TriggerEnter_args(this);
    }

    @Override
    public void clear() {
      setObjectIdIsSet(false);
      this.objectId = 0;
      setSourceIdIsSet(false);
      this.sourceId = 0;
    }

    public short getObjectId() {
      return this.objectId;
    }

    public TriggerEnter_args setObjectId(short objectId) {
      this.objectId = objectId;
      setObjectIdIsSet(true);
      return this;
    }

    public void unsetObjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OBJECTID_ISSET_ID);
    }

    /** Returns true if field objectId is set (has been assigned a value) and false otherwise */
    public boolean isSetObjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __OBJECTID_ISSET_ID);
    }

    public void setObjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OBJECTID_ISSET_ID, value);
    }

    public short getSourceId() {
      return this.sourceId;
    }

    public TriggerEnter_args setSourceId(short sourceId) {
      this.sourceId = sourceId;
      setSourceIdIsSet(true);
      return this;
    }

    public void unsetSourceId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SOURCEID_ISSET_ID);
    }

    /** Returns true if field sourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetSourceId() {
      return EncodingUtils.testBit(__isset_bitfield, __SOURCEID_ISSET_ID);
    }

    public void setSourceIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SOURCEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OBJECT_ID:
        if (value == null) {
          unsetObjectId();
        } else {
          setObjectId((Short)value);
        }
        break;

      case SOURCE_ID:
        if (value == null) {
          unsetSourceId();
        } else {
          setSourceId((Short)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OBJECT_ID:
        return getObjectId();

      case SOURCE_ID:
        return getSourceId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OBJECT_ID:
        return isSetObjectId();
      case SOURCE_ID:
        return isSetSourceId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof TriggerEnter_args)
        return this.equals((TriggerEnter_args)that);
      return false;
    }

    public boolean equals(TriggerEnter_args that) {
      if (that == null)
        return false;

      boolean this_present_objectId = true;
      boolean that_present_objectId = true;
      if (this_present_objectId || that_present_objectId) {
        if (!(this_present_objectId && that_present_objectId))
          return false;
        if (this.objectId != that.objectId)
          return false;
      }

      boolean this_present_sourceId = true;
      boolean that_present_sourceId = true;
      if (this_present_sourceId || that_present_sourceId) {
        if (!(this_present_sourceId && that_present_sourceId))
          return false;
        if (this.sourceId != that.sourceId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_objectId = true;
      list.add(present_objectId);
      if (present_objectId)
        list.add(objectId);

      boolean present_sourceId = true;
      list.add(present_sourceId);
      if (present_sourceId)
        list.add(sourceId);

      return list.hashCode();
    }

    @Override
    public int compareTo(TriggerEnter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetObjectId()).compareTo(other.isSetObjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetObjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.objectId, other.objectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSourceId()).compareTo(other.isSetSourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceId, other.sourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("TriggerEnter_args(");
      boolean first = true;

      sb.append("objectId:");
      sb.append(this.objectId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sourceId:");
      sb.append(this.sourceId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class TriggerEnter_argsStandardSchemeFactory implements SchemeFactory {
      public TriggerEnter_argsStandardScheme getScheme() {
        return new TriggerEnter_argsStandardScheme();
      }
    }

    private static class TriggerEnter_argsStandardScheme extends StandardScheme<TriggerEnter_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, TriggerEnter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OBJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.objectId = iprot.readI16();
                struct.setObjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SOURCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.sourceId = iprot.readI16();
                struct.setSourceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, TriggerEnter_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(OBJECT_ID_FIELD_DESC);
        oprot.writeI16(struct.objectId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SOURCE_ID_FIELD_DESC);
        oprot.writeI16(struct.sourceId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class TriggerEnter_argsTupleSchemeFactory implements SchemeFactory {
      public TriggerEnter_argsTupleScheme getScheme() {
        return new TriggerEnter_argsTupleScheme();
      }
    }

    private static class TriggerEnter_argsTupleScheme extends TupleScheme<TriggerEnter_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, TriggerEnter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetObjectId()) {
          optionals.set(0);
        }
        if (struct.isSetSourceId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetObjectId()) {
          oprot.writeI16(struct.objectId);
        }
        if (struct.isSetSourceId()) {
          oprot.writeI16(struct.sourceId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, TriggerEnter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.objectId = iprot.readI16();
          struct.setObjectIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sourceId = iprot.readI16();
          struct.setSourceIdIsSet(true);
        }
      }
    }

  }

  public static class TriggerEnter_result implements org.apache.thrift.TBase<TriggerEnter_result, TriggerEnter_result._Fields>, java.io.Serializable, Cloneable, Comparable<TriggerEnter_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TriggerEnter_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new TriggerEnter_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new TriggerEnter_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TriggerEnter_result.class, metaDataMap);
    }

    public TriggerEnter_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TriggerEnter_result(TriggerEnter_result other) {
    }

    public TriggerEnter_result deepCopy() {
      return new TriggerEnter_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof TriggerEnter_result)
        return this.equals((TriggerEnter_result)that);
      return false;
    }

    public boolean equals(TriggerEnter_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(TriggerEnter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("TriggerEnter_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class TriggerEnter_resultStandardSchemeFactory implements SchemeFactory {
      public TriggerEnter_resultStandardScheme getScheme() {
        return new TriggerEnter_resultStandardScheme();
      }
    }

    private static class TriggerEnter_resultStandardScheme extends StandardScheme<TriggerEnter_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, TriggerEnter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, TriggerEnter_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class TriggerEnter_resultTupleSchemeFactory implements SchemeFactory {
      public TriggerEnter_resultTupleScheme getScheme() {
        return new TriggerEnter_resultTupleScheme();
      }
    }

    private static class TriggerEnter_resultTupleScheme extends TupleScheme<TriggerEnter_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, TriggerEnter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, TriggerEnter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class TriggerLeave_args implements org.apache.thrift.TBase<TriggerLeave_args, TriggerLeave_args._Fields>, java.io.Serializable, Cloneable, Comparable<TriggerLeave_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TriggerLeave_args");

    private static final org.apache.thrift.protocol.TField OBJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("objectId", org.apache.thrift.protocol.TType.I16, (short)1);
    private static final org.apache.thrift.protocol.TField SOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceId", org.apache.thrift.protocol.TType.I16, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new TriggerLeave_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new TriggerLeave_argsTupleSchemeFactory());
    }

    public short objectId; // required
    public short sourceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OBJECT_ID((short)1, "objectId"),
      SOURCE_ID((short)2, "sourceId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OBJECT_ID
            return OBJECT_ID;
          case 2: // SOURCE_ID
            return SOURCE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __OBJECTID_ISSET_ID = 0;
    private static final int __SOURCEID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OBJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("objectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.SOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("sourceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TriggerLeave_args.class, metaDataMap);
    }

    public TriggerLeave_args() {
    }

    public TriggerLeave_args(
      short objectId,
      short sourceId)
    {
      this();
      this.objectId = objectId;
      setObjectIdIsSet(true);
      this.sourceId = sourceId;
      setSourceIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TriggerLeave_args(TriggerLeave_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.objectId = other.objectId;
      this.sourceId = other.sourceId;
    }

    public TriggerLeave_args deepCopy() {
      return new TriggerLeave_args(this);
    }

    @Override
    public void clear() {
      setObjectIdIsSet(false);
      this.objectId = 0;
      setSourceIdIsSet(false);
      this.sourceId = 0;
    }

    public short getObjectId() {
      return this.objectId;
    }

    public TriggerLeave_args setObjectId(short objectId) {
      this.objectId = objectId;
      setObjectIdIsSet(true);
      return this;
    }

    public void unsetObjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OBJECTID_ISSET_ID);
    }

    /** Returns true if field objectId is set (has been assigned a value) and false otherwise */
    public boolean isSetObjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __OBJECTID_ISSET_ID);
    }

    public void setObjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OBJECTID_ISSET_ID, value);
    }

    public short getSourceId() {
      return this.sourceId;
    }

    public TriggerLeave_args setSourceId(short sourceId) {
      this.sourceId = sourceId;
      setSourceIdIsSet(true);
      return this;
    }

    public void unsetSourceId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SOURCEID_ISSET_ID);
    }

    /** Returns true if field sourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetSourceId() {
      return EncodingUtils.testBit(__isset_bitfield, __SOURCEID_ISSET_ID);
    }

    public void setSourceIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SOURCEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OBJECT_ID:
        if (value == null) {
          unsetObjectId();
        } else {
          setObjectId((Short)value);
        }
        break;

      case SOURCE_ID:
        if (value == null) {
          unsetSourceId();
        } else {
          setSourceId((Short)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OBJECT_ID:
        return getObjectId();

      case SOURCE_ID:
        return getSourceId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OBJECT_ID:
        return isSetObjectId();
      case SOURCE_ID:
        return isSetSourceId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof TriggerLeave_args)
        return this.equals((TriggerLeave_args)that);
      return false;
    }

    public boolean equals(TriggerLeave_args that) {
      if (that == null)
        return false;

      boolean this_present_objectId = true;
      boolean that_present_objectId = true;
      if (this_present_objectId || that_present_objectId) {
        if (!(this_present_objectId && that_present_objectId))
          return false;
        if (this.objectId != that.objectId)
          return false;
      }

      boolean this_present_sourceId = true;
      boolean that_present_sourceId = true;
      if (this_present_sourceId || that_present_sourceId) {
        if (!(this_present_sourceId && that_present_sourceId))
          return false;
        if (this.sourceId != that.sourceId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_objectId = true;
      list.add(present_objectId);
      if (present_objectId)
        list.add(objectId);

      boolean present_sourceId = true;
      list.add(present_sourceId);
      if (present_sourceId)
        list.add(sourceId);

      return list.hashCode();
    }

    @Override
    public int compareTo(TriggerLeave_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetObjectId()).compareTo(other.isSetObjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetObjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.objectId, other.objectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSourceId()).compareTo(other.isSetSourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceId, other.sourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("TriggerLeave_args(");
      boolean first = true;

      sb.append("objectId:");
      sb.append(this.objectId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sourceId:");
      sb.append(this.sourceId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class TriggerLeave_argsStandardSchemeFactory implements SchemeFactory {
      public TriggerLeave_argsStandardScheme getScheme() {
        return new TriggerLeave_argsStandardScheme();
      }
    }

    private static class TriggerLeave_argsStandardScheme extends StandardScheme<TriggerLeave_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, TriggerLeave_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OBJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.objectId = iprot.readI16();
                struct.setObjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SOURCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.sourceId = iprot.readI16();
                struct.setSourceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, TriggerLeave_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(OBJECT_ID_FIELD_DESC);
        oprot.writeI16(struct.objectId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SOURCE_ID_FIELD_DESC);
        oprot.writeI16(struct.sourceId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class TriggerLeave_argsTupleSchemeFactory implements SchemeFactory {
      public TriggerLeave_argsTupleScheme getScheme() {
        return new TriggerLeave_argsTupleScheme();
      }
    }

    private static class TriggerLeave_argsTupleScheme extends TupleScheme<TriggerLeave_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, TriggerLeave_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetObjectId()) {
          optionals.set(0);
        }
        if (struct.isSetSourceId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetObjectId()) {
          oprot.writeI16(struct.objectId);
        }
        if (struct.isSetSourceId()) {
          oprot.writeI16(struct.sourceId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, TriggerLeave_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.objectId = iprot.readI16();
          struct.setObjectIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sourceId = iprot.readI16();
          struct.setSourceIdIsSet(true);
        }
      }
    }

  }

  public static class TriggerLeave_result implements org.apache.thrift.TBase<TriggerLeave_result, TriggerLeave_result._Fields>, java.io.Serializable, Cloneable, Comparable<TriggerLeave_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TriggerLeave_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new TriggerLeave_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new TriggerLeave_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TriggerLeave_result.class, metaDataMap);
    }

    public TriggerLeave_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TriggerLeave_result(TriggerLeave_result other) {
    }

    public TriggerLeave_result deepCopy() {
      return new TriggerLeave_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof TriggerLeave_result)
        return this.equals((TriggerLeave_result)that);
      return false;
    }

    public boolean equals(TriggerLeave_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(TriggerLeave_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("TriggerLeave_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class TriggerLeave_resultStandardSchemeFactory implements SchemeFactory {
      public TriggerLeave_resultStandardScheme getScheme() {
        return new TriggerLeave_resultStandardScheme();
      }
    }

    private static class TriggerLeave_resultStandardScheme extends StandardScheme<TriggerLeave_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, TriggerLeave_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, TriggerLeave_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class TriggerLeave_resultTupleSchemeFactory implements SchemeFactory {
      public TriggerLeave_resultTupleScheme getScheme() {
        return new TriggerLeave_resultTupleScheme();
      }
    }

    private static class TriggerLeave_resultTupleScheme extends TupleScheme<TriggerLeave_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, TriggerLeave_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, TriggerLeave_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class Move_args implements org.apache.thrift.TBase<Move_args, Move_args._Fields>, java.io.Serializable, Cloneable, Comparable<Move_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Move_args");

    private static final org.apache.thrift.protocol.TField OBJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("objectId", org.apache.thrift.protocol.TType.I16, (short)1);
    private static final org.apache.thrift.protocol.TField DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("direction", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField FROM_X_FIELD_DESC = new org.apache.thrift.protocol.TField("fromX", org.apache.thrift.protocol.TType.I16, (short)3);
    private static final org.apache.thrift.protocol.TField FROM_Y_FIELD_DESC = new org.apache.thrift.protocol.TField("fromY", org.apache.thrift.protocol.TType.I16, (short)4);
    private static final org.apache.thrift.protocol.TField TO_X_FIELD_DESC = new org.apache.thrift.protocol.TField("toX", org.apache.thrift.protocol.TType.I16, (short)5);
    private static final org.apache.thrift.protocol.TField TO_Y_FIELD_DESC = new org.apache.thrift.protocol.TField("toY", org.apache.thrift.protocol.TType.I16, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Move_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Move_argsTupleSchemeFactory());
    }

    public short objectId; // required
    /**
     * 
     * @see Direction
     */
    public Direction direction; // required
    public short fromX; // required
    public short fromY; // required
    public short toX; // required
    public short toY; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OBJECT_ID((short)1, "objectId"),
      /**
       * 
       * @see Direction
       */
      DIRECTION((short)2, "direction"),
      FROM_X((short)3, "fromX"),
      FROM_Y((short)4, "fromY"),
      TO_X((short)5, "toX"),
      TO_Y((short)6, "toY");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OBJECT_ID
            return OBJECT_ID;
          case 2: // DIRECTION
            return DIRECTION;
          case 3: // FROM_X
            return FROM_X;
          case 4: // FROM_Y
            return FROM_Y;
          case 5: // TO_X
            return TO_X;
          case 6: // TO_Y
            return TO_Y;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __OBJECTID_ISSET_ID = 0;
    private static final int __FROMX_ISSET_ID = 1;
    private static final int __FROMY_ISSET_ID = 2;
    private static final int __TOX_ISSET_ID = 3;
    private static final int __TOY_ISSET_ID = 4;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OBJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("objectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("direction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Direction.class)));
      tmpMap.put(_Fields.FROM_X, new org.apache.thrift.meta_data.FieldMetaData("fromX", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.FROM_Y, new org.apache.thrift.meta_data.FieldMetaData("fromY", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.TO_X, new org.apache.thrift.meta_data.FieldMetaData("toX", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.TO_Y, new org.apache.thrift.meta_data.FieldMetaData("toY", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Move_args.class, metaDataMap);
    }

    public Move_args() {
    }

    public Move_args(
      short objectId,
      Direction direction,
      short fromX,
      short fromY,
      short toX,
      short toY)
    {
      this();
      this.objectId = objectId;
      setObjectIdIsSet(true);
      this.direction = direction;
      this.fromX = fromX;
      setFromXIsSet(true);
      this.fromY = fromY;
      setFromYIsSet(true);
      this.toX = toX;
      setToXIsSet(true);
      this.toY = toY;
      setToYIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Move_args(Move_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.objectId = other.objectId;
      if (other.isSetDirection()) {
        this.direction = other.direction;
      }
      this.fromX = other.fromX;
      this.fromY = other.fromY;
      this.toX = other.toX;
      this.toY = other.toY;
    }

    public Move_args deepCopy() {
      return new Move_args(this);
    }

    @Override
    public void clear() {
      setObjectIdIsSet(false);
      this.objectId = 0;
      this.direction = null;
      setFromXIsSet(false);
      this.fromX = 0;
      setFromYIsSet(false);
      this.fromY = 0;
      setToXIsSet(false);
      this.toX = 0;
      setToYIsSet(false);
      this.toY = 0;
    }

    public short getObjectId() {
      return this.objectId;
    }

    public Move_args setObjectId(short objectId) {
      this.objectId = objectId;
      setObjectIdIsSet(true);
      return this;
    }

    public void unsetObjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OBJECTID_ISSET_ID);
    }

    /** Returns true if field objectId is set (has been assigned a value) and false otherwise */
    public boolean isSetObjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __OBJECTID_ISSET_ID);
    }

    public void setObjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OBJECTID_ISSET_ID, value);
    }

    /**
     * 
     * @see Direction
     */
    public Direction getDirection() {
      return this.direction;
    }

    /**
     * 
     * @see Direction
     */
    public Move_args setDirection(Direction direction) {
      this.direction = direction;
      return this;
    }

    public void unsetDirection() {
      this.direction = null;
    }

    /** Returns true if field direction is set (has been assigned a value) and false otherwise */
    public boolean isSetDirection() {
      return this.direction != null;
    }

    public void setDirectionIsSet(boolean value) {
      if (!value) {
        this.direction = null;
      }
    }

    public short getFromX() {
      return this.fromX;
    }

    public Move_args setFromX(short fromX) {
      this.fromX = fromX;
      setFromXIsSet(true);
      return this;
    }

    public void unsetFromX() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROMX_ISSET_ID);
    }

    /** Returns true if field fromX is set (has been assigned a value) and false otherwise */
    public boolean isSetFromX() {
      return EncodingUtils.testBit(__isset_bitfield, __FROMX_ISSET_ID);
    }

    public void setFromXIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROMX_ISSET_ID, value);
    }

    public short getFromY() {
      return this.fromY;
    }

    public Move_args setFromY(short fromY) {
      this.fromY = fromY;
      setFromYIsSet(true);
      return this;
    }

    public void unsetFromY() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROMY_ISSET_ID);
    }

    /** Returns true if field fromY is set (has been assigned a value) and false otherwise */
    public boolean isSetFromY() {
      return EncodingUtils.testBit(__isset_bitfield, __FROMY_ISSET_ID);
    }

    public void setFromYIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROMY_ISSET_ID, value);
    }

    public short getToX() {
      return this.toX;
    }

    public Move_args setToX(short toX) {
      this.toX = toX;
      setToXIsSet(true);
      return this;
    }

    public void unsetToX() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOX_ISSET_ID);
    }

    /** Returns true if field toX is set (has been assigned a value) and false otherwise */
    public boolean isSetToX() {
      return EncodingUtils.testBit(__isset_bitfield, __TOX_ISSET_ID);
    }

    public void setToXIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOX_ISSET_ID, value);
    }

    public short getToY() {
      return this.toY;
    }

    public Move_args setToY(short toY) {
      this.toY = toY;
      setToYIsSet(true);
      return this;
    }

    public void unsetToY() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOY_ISSET_ID);
    }

    /** Returns true if field toY is set (has been assigned a value) and false otherwise */
    public boolean isSetToY() {
      return EncodingUtils.testBit(__isset_bitfield, __TOY_ISSET_ID);
    }

    public void setToYIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OBJECT_ID:
        if (value == null) {
          unsetObjectId();
        } else {
          setObjectId((Short)value);
        }
        break;

      case DIRECTION:
        if (value == null) {
          unsetDirection();
        } else {
          setDirection((Direction)value);
        }
        break;

      case FROM_X:
        if (value == null) {
          unsetFromX();
        } else {
          setFromX((Short)value);
        }
        break;

      case FROM_Y:
        if (value == null) {
          unsetFromY();
        } else {
          setFromY((Short)value);
        }
        break;

      case TO_X:
        if (value == null) {
          unsetToX();
        } else {
          setToX((Short)value);
        }
        break;

      case TO_Y:
        if (value == null) {
          unsetToY();
        } else {
          setToY((Short)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OBJECT_ID:
        return getObjectId();

      case DIRECTION:
        return getDirection();

      case FROM_X:
        return getFromX();

      case FROM_Y:
        return getFromY();

      case TO_X:
        return getToX();

      case TO_Y:
        return getToY();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OBJECT_ID:
        return isSetObjectId();
      case DIRECTION:
        return isSetDirection();
      case FROM_X:
        return isSetFromX();
      case FROM_Y:
        return isSetFromY();
      case TO_X:
        return isSetToX();
      case TO_Y:
        return isSetToY();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Move_args)
        return this.equals((Move_args)that);
      return false;
    }

    public boolean equals(Move_args that) {
      if (that == null)
        return false;

      boolean this_present_objectId = true;
      boolean that_present_objectId = true;
      if (this_present_objectId || that_present_objectId) {
        if (!(this_present_objectId && that_present_objectId))
          return false;
        if (this.objectId != that.objectId)
          return false;
      }

      boolean this_present_direction = true && this.isSetDirection();
      boolean that_present_direction = true && that.isSetDirection();
      if (this_present_direction || that_present_direction) {
        if (!(this_present_direction && that_present_direction))
          return false;
        if (!this.direction.equals(that.direction))
          return false;
      }

      boolean this_present_fromX = true;
      boolean that_present_fromX = true;
      if (this_present_fromX || that_present_fromX) {
        if (!(this_present_fromX && that_present_fromX))
          return false;
        if (this.fromX != that.fromX)
          return false;
      }

      boolean this_present_fromY = true;
      boolean that_present_fromY = true;
      if (this_present_fromY || that_present_fromY) {
        if (!(this_present_fromY && that_present_fromY))
          return false;
        if (this.fromY != that.fromY)
          return false;
      }

      boolean this_present_toX = true;
      boolean that_present_toX = true;
      if (this_present_toX || that_present_toX) {
        if (!(this_present_toX && that_present_toX))
          return false;
        if (this.toX != that.toX)
          return false;
      }

      boolean this_present_toY = true;
      boolean that_present_toY = true;
      if (this_present_toY || that_present_toY) {
        if (!(this_present_toY && that_present_toY))
          return false;
        if (this.toY != that.toY)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_objectId = true;
      list.add(present_objectId);
      if (present_objectId)
        list.add(objectId);

      boolean present_direction = true && (isSetDirection());
      list.add(present_direction);
      if (present_direction)
        list.add(direction.getValue());

      boolean present_fromX = true;
      list.add(present_fromX);
      if (present_fromX)
        list.add(fromX);

      boolean present_fromY = true;
      list.add(present_fromY);
      if (present_fromY)
        list.add(fromY);

      boolean present_toX = true;
      list.add(present_toX);
      if (present_toX)
        list.add(toX);

      boolean present_toY = true;
      list.add(present_toY);
      if (present_toY)
        list.add(toY);

      return list.hashCode();
    }

    @Override
    public int compareTo(Move_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetObjectId()).compareTo(other.isSetObjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetObjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.objectId, other.objectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDirection()).compareTo(other.isSetDirection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDirection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.direction, other.direction);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFromX()).compareTo(other.isSetFromX());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFromX()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromX, other.fromX);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFromY()).compareTo(other.isSetFromY());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFromY()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromY, other.fromY);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToX()).compareTo(other.isSetToX());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToX()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toX, other.toX);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToY()).compareTo(other.isSetToY());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToY()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toY, other.toY);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Move_args(");
      boolean first = true;

      sb.append("objectId:");
      sb.append(this.objectId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("direction:");
      if (this.direction == null) {
        sb.append("null");
      } else {
        sb.append(this.direction);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fromX:");
      sb.append(this.fromX);
      first = false;
      if (!first) sb.append(", ");
      sb.append("fromY:");
      sb.append(this.fromY);
      first = false;
      if (!first) sb.append(", ");
      sb.append("toX:");
      sb.append(this.toX);
      first = false;
      if (!first) sb.append(", ");
      sb.append("toY:");
      sb.append(this.toY);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class Move_argsStandardSchemeFactory implements SchemeFactory {
      public Move_argsStandardScheme getScheme() {
        return new Move_argsStandardScheme();
      }
    }

    private static class Move_argsStandardScheme extends StandardScheme<Move_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Move_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OBJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.objectId = iprot.readI16();
                struct.setObjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DIRECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.direction = Direction.findByValue(iprot.readI32());
                struct.setDirectionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FROM_X
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.fromX = iprot.readI16();
                struct.setFromXIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // FROM_Y
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.fromY = iprot.readI16();
                struct.setFromYIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TO_X
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.toX = iprot.readI16();
                struct.setToXIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TO_Y
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.toY = iprot.readI16();
                struct.setToYIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Move_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(OBJECT_ID_FIELD_DESC);
        oprot.writeI16(struct.objectId);
        oprot.writeFieldEnd();
        if (struct.direction != null) {
          oprot.writeFieldBegin(DIRECTION_FIELD_DESC);
          oprot.writeI32(struct.direction.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FROM_X_FIELD_DESC);
        oprot.writeI16(struct.fromX);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(FROM_Y_FIELD_DESC);
        oprot.writeI16(struct.fromY);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TO_X_FIELD_DESC);
        oprot.writeI16(struct.toX);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TO_Y_FIELD_DESC);
        oprot.writeI16(struct.toY);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Move_argsTupleSchemeFactory implements SchemeFactory {
      public Move_argsTupleScheme getScheme() {
        return new Move_argsTupleScheme();
      }
    }

    private static class Move_argsTupleScheme extends TupleScheme<Move_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Move_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetObjectId()) {
          optionals.set(0);
        }
        if (struct.isSetDirection()) {
          optionals.set(1);
        }
        if (struct.isSetFromX()) {
          optionals.set(2);
        }
        if (struct.isSetFromY()) {
          optionals.set(3);
        }
        if (struct.isSetToX()) {
          optionals.set(4);
        }
        if (struct.isSetToY()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetObjectId()) {
          oprot.writeI16(struct.objectId);
        }
        if (struct.isSetDirection()) {
          oprot.writeI32(struct.direction.getValue());
        }
        if (struct.isSetFromX()) {
          oprot.writeI16(struct.fromX);
        }
        if (struct.isSetFromY()) {
          oprot.writeI16(struct.fromY);
        }
        if (struct.isSetToX()) {
          oprot.writeI16(struct.toX);
        }
        if (struct.isSetToY()) {
          oprot.writeI16(struct.toY);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Move_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.objectId = iprot.readI16();
          struct.setObjectIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.direction = Direction.findByValue(iprot.readI32());
          struct.setDirectionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.fromX = iprot.readI16();
          struct.setFromXIsSet(true);
        }
        if (incoming.get(3)) {
          struct.fromY = iprot.readI16();
          struct.setFromYIsSet(true);
        }
        if (incoming.get(4)) {
          struct.toX = iprot.readI16();
          struct.setToXIsSet(true);
        }
        if (incoming.get(5)) {
          struct.toY = iprot.readI16();
          struct.setToYIsSet(true);
        }
      }
    }

  }

  public static class Move_result implements org.apache.thrift.TBase<Move_result, Move_result._Fields>, java.io.Serializable, Cloneable, Comparable<Move_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Move_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Move_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Move_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Move_result.class, metaDataMap);
    }

    public Move_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Move_result(Move_result other) {
    }

    public Move_result deepCopy() {
      return new Move_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Move_result)
        return this.equals((Move_result)that);
      return false;
    }

    public boolean equals(Move_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(Move_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Move_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class Move_resultStandardSchemeFactory implements SchemeFactory {
      public Move_resultStandardScheme getScheme() {
        return new Move_resultStandardScheme();
      }
    }

    private static class Move_resultStandardScheme extends StandardScheme<Move_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Move_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Move_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Move_resultTupleSchemeFactory implements SchemeFactory {
      public Move_resultTupleScheme getScheme() {
        return new Move_resultTupleScheme();
      }
    }

    private static class Move_resultTupleScheme extends TupleScheme<Move_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Move_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Move_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class Jump_args implements org.apache.thrift.TBase<Jump_args, Jump_args._Fields>, java.io.Serializable, Cloneable, Comparable<Jump_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Jump_args");

    private static final org.apache.thrift.protocol.TField OBJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("objectId", org.apache.thrift.protocol.TType.I16, (short)1);
    private static final org.apache.thrift.protocol.TField DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("direction", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField FROM_X_FIELD_DESC = new org.apache.thrift.protocol.TField("fromX", org.apache.thrift.protocol.TType.I16, (short)3);
    private static final org.apache.thrift.protocol.TField FROM_Y_FIELD_DESC = new org.apache.thrift.protocol.TField("fromY", org.apache.thrift.protocol.TType.I16, (short)4);
    private static final org.apache.thrift.protocol.TField TO_X_FIELD_DESC = new org.apache.thrift.protocol.TField("toX", org.apache.thrift.protocol.TType.I16, (short)5);
    private static final org.apache.thrift.protocol.TField TO_Y_FIELD_DESC = new org.apache.thrift.protocol.TField("toY", org.apache.thrift.protocol.TType.I16, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Jump_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Jump_argsTupleSchemeFactory());
    }

    public short objectId; // required
    /**
     * 
     * @see Direction
     */
    public Direction direction; // required
    public short fromX; // required
    public short fromY; // required
    public short toX; // required
    public short toY; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OBJECT_ID((short)1, "objectId"),
      /**
       * 
       * @see Direction
       */
      DIRECTION((short)2, "direction"),
      FROM_X((short)3, "fromX"),
      FROM_Y((short)4, "fromY"),
      TO_X((short)5, "toX"),
      TO_Y((short)6, "toY");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OBJECT_ID
            return OBJECT_ID;
          case 2: // DIRECTION
            return DIRECTION;
          case 3: // FROM_X
            return FROM_X;
          case 4: // FROM_Y
            return FROM_Y;
          case 5: // TO_X
            return TO_X;
          case 6: // TO_Y
            return TO_Y;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __OBJECTID_ISSET_ID = 0;
    private static final int __FROMX_ISSET_ID = 1;
    private static final int __FROMY_ISSET_ID = 2;
    private static final int __TOX_ISSET_ID = 3;
    private static final int __TOY_ISSET_ID = 4;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OBJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("objectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("direction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Direction.class)));
      tmpMap.put(_Fields.FROM_X, new org.apache.thrift.meta_data.FieldMetaData("fromX", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.FROM_Y, new org.apache.thrift.meta_data.FieldMetaData("fromY", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.TO_X, new org.apache.thrift.meta_data.FieldMetaData("toX", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.TO_Y, new org.apache.thrift.meta_data.FieldMetaData("toY", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Jump_args.class, metaDataMap);
    }

    public Jump_args() {
    }

    public Jump_args(
      short objectId,
      Direction direction,
      short fromX,
      short fromY,
      short toX,
      short toY)
    {
      this();
      this.objectId = objectId;
      setObjectIdIsSet(true);
      this.direction = direction;
      this.fromX = fromX;
      setFromXIsSet(true);
      this.fromY = fromY;
      setFromYIsSet(true);
      this.toX = toX;
      setToXIsSet(true);
      this.toY = toY;
      setToYIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Jump_args(Jump_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.objectId = other.objectId;
      if (other.isSetDirection()) {
        this.direction = other.direction;
      }
      this.fromX = other.fromX;
      this.fromY = other.fromY;
      this.toX = other.toX;
      this.toY = other.toY;
    }

    public Jump_args deepCopy() {
      return new Jump_args(this);
    }

    @Override
    public void clear() {
      setObjectIdIsSet(false);
      this.objectId = 0;
      this.direction = null;
      setFromXIsSet(false);
      this.fromX = 0;
      setFromYIsSet(false);
      this.fromY = 0;
      setToXIsSet(false);
      this.toX = 0;
      setToYIsSet(false);
      this.toY = 0;
    }

    public short getObjectId() {
      return this.objectId;
    }

    public Jump_args setObjectId(short objectId) {
      this.objectId = objectId;
      setObjectIdIsSet(true);
      return this;
    }

    public void unsetObjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OBJECTID_ISSET_ID);
    }

    /** Returns true if field objectId is set (has been assigned a value) and false otherwise */
    public boolean isSetObjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __OBJECTID_ISSET_ID);
    }

    public void setObjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OBJECTID_ISSET_ID, value);
    }

    /**
     * 
     * @see Direction
     */
    public Direction getDirection() {
      return this.direction;
    }

    /**
     * 
     * @see Direction
     */
    public Jump_args setDirection(Direction direction) {
      this.direction = direction;
      return this;
    }

    public void unsetDirection() {
      this.direction = null;
    }

    /** Returns true if field direction is set (has been assigned a value) and false otherwise */
    public boolean isSetDirection() {
      return this.direction != null;
    }

    public void setDirectionIsSet(boolean value) {
      if (!value) {
        this.direction = null;
      }
    }

    public short getFromX() {
      return this.fromX;
    }

    public Jump_args setFromX(short fromX) {
      this.fromX = fromX;
      setFromXIsSet(true);
      return this;
    }

    public void unsetFromX() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROMX_ISSET_ID);
    }

    /** Returns true if field fromX is set (has been assigned a value) and false otherwise */
    public boolean isSetFromX() {
      return EncodingUtils.testBit(__isset_bitfield, __FROMX_ISSET_ID);
    }

    public void setFromXIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROMX_ISSET_ID, value);
    }

    public short getFromY() {
      return this.fromY;
    }

    public Jump_args setFromY(short fromY) {
      this.fromY = fromY;
      setFromYIsSet(true);
      return this;
    }

    public void unsetFromY() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROMY_ISSET_ID);
    }

    /** Returns true if field fromY is set (has been assigned a value) and false otherwise */
    public boolean isSetFromY() {
      return EncodingUtils.testBit(__isset_bitfield, __FROMY_ISSET_ID);
    }

    public void setFromYIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROMY_ISSET_ID, value);
    }

    public short getToX() {
      return this.toX;
    }

    public Jump_args setToX(short toX) {
      this.toX = toX;
      setToXIsSet(true);
      return this;
    }

    public void unsetToX() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOX_ISSET_ID);
    }

    /** Returns true if field toX is set (has been assigned a value) and false otherwise */
    public boolean isSetToX() {
      return EncodingUtils.testBit(__isset_bitfield, __TOX_ISSET_ID);
    }

    public void setToXIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOX_ISSET_ID, value);
    }

    public short getToY() {
      return this.toY;
    }

    public Jump_args setToY(short toY) {
      this.toY = toY;
      setToYIsSet(true);
      return this;
    }

    public void unsetToY() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOY_ISSET_ID);
    }

    /** Returns true if field toY is set (has been assigned a value) and false otherwise */
    public boolean isSetToY() {
      return EncodingUtils.testBit(__isset_bitfield, __TOY_ISSET_ID);
    }

    public void setToYIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OBJECT_ID:
        if (value == null) {
          unsetObjectId();
        } else {
          setObjectId((Short)value);
        }
        break;

      case DIRECTION:
        if (value == null) {
          unsetDirection();
        } else {
          setDirection((Direction)value);
        }
        break;

      case FROM_X:
        if (value == null) {
          unsetFromX();
        } else {
          setFromX((Short)value);
        }
        break;

      case FROM_Y:
        if (value == null) {
          unsetFromY();
        } else {
          setFromY((Short)value);
        }
        break;

      case TO_X:
        if (value == null) {
          unsetToX();
        } else {
          setToX((Short)value);
        }
        break;

      case TO_Y:
        if (value == null) {
          unsetToY();
        } else {
          setToY((Short)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OBJECT_ID:
        return getObjectId();

      case DIRECTION:
        return getDirection();

      case FROM_X:
        return getFromX();

      case FROM_Y:
        return getFromY();

      case TO_X:
        return getToX();

      case TO_Y:
        return getToY();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OBJECT_ID:
        return isSetObjectId();
      case DIRECTION:
        return isSetDirection();
      case FROM_X:
        return isSetFromX();
      case FROM_Y:
        return isSetFromY();
      case TO_X:
        return isSetToX();
      case TO_Y:
        return isSetToY();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Jump_args)
        return this.equals((Jump_args)that);
      return false;
    }

    public boolean equals(Jump_args that) {
      if (that == null)
        return false;

      boolean this_present_objectId = true;
      boolean that_present_objectId = true;
      if (this_present_objectId || that_present_objectId) {
        if (!(this_present_objectId && that_present_objectId))
          return false;
        if (this.objectId != that.objectId)
          return false;
      }

      boolean this_present_direction = true && this.isSetDirection();
      boolean that_present_direction = true && that.isSetDirection();
      if (this_present_direction || that_present_direction) {
        if (!(this_present_direction && that_present_direction))
          return false;
        if (!this.direction.equals(that.direction))
          return false;
      }

      boolean this_present_fromX = true;
      boolean that_present_fromX = true;
      if (this_present_fromX || that_present_fromX) {
        if (!(this_present_fromX && that_present_fromX))
          return false;
        if (this.fromX != that.fromX)
          return false;
      }

      boolean this_present_fromY = true;
      boolean that_present_fromY = true;
      if (this_present_fromY || that_present_fromY) {
        if (!(this_present_fromY && that_present_fromY))
          return false;
        if (this.fromY != that.fromY)
          return false;
      }

      boolean this_present_toX = true;
      boolean that_present_toX = true;
      if (this_present_toX || that_present_toX) {
        if (!(this_present_toX && that_present_toX))
          return false;
        if (this.toX != that.toX)
          return false;
      }

      boolean this_present_toY = true;
      boolean that_present_toY = true;
      if (this_present_toY || that_present_toY) {
        if (!(this_present_toY && that_present_toY))
          return false;
        if (this.toY != that.toY)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_objectId = true;
      list.add(present_objectId);
      if (present_objectId)
        list.add(objectId);

      boolean present_direction = true && (isSetDirection());
      list.add(present_direction);
      if (present_direction)
        list.add(direction.getValue());

      boolean present_fromX = true;
      list.add(present_fromX);
      if (present_fromX)
        list.add(fromX);

      boolean present_fromY = true;
      list.add(present_fromY);
      if (present_fromY)
        list.add(fromY);

      boolean present_toX = true;
      list.add(present_toX);
      if (present_toX)
        list.add(toX);

      boolean present_toY = true;
      list.add(present_toY);
      if (present_toY)
        list.add(toY);

      return list.hashCode();
    }

    @Override
    public int compareTo(Jump_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetObjectId()).compareTo(other.isSetObjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetObjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.objectId, other.objectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDirection()).compareTo(other.isSetDirection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDirection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.direction, other.direction);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFromX()).compareTo(other.isSetFromX());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFromX()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromX, other.fromX);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFromY()).compareTo(other.isSetFromY());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFromY()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromY, other.fromY);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToX()).compareTo(other.isSetToX());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToX()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toX, other.toX);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToY()).compareTo(other.isSetToY());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToY()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toY, other.toY);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Jump_args(");
      boolean first = true;

      sb.append("objectId:");
      sb.append(this.objectId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("direction:");
      if (this.direction == null) {
        sb.append("null");
      } else {
        sb.append(this.direction);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fromX:");
      sb.append(this.fromX);
      first = false;
      if (!first) sb.append(", ");
      sb.append("fromY:");
      sb.append(this.fromY);
      first = false;
      if (!first) sb.append(", ");
      sb.append("toX:");
      sb.append(this.toX);
      first = false;
      if (!first) sb.append(", ");
      sb.append("toY:");
      sb.append(this.toY);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class Jump_argsStandardSchemeFactory implements SchemeFactory {
      public Jump_argsStandardScheme getScheme() {
        return new Jump_argsStandardScheme();
      }
    }

    private static class Jump_argsStandardScheme extends StandardScheme<Jump_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Jump_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OBJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.objectId = iprot.readI16();
                struct.setObjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DIRECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.direction = Direction.findByValue(iprot.readI32());
                struct.setDirectionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FROM_X
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.fromX = iprot.readI16();
                struct.setFromXIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // FROM_Y
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.fromY = iprot.readI16();
                struct.setFromYIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TO_X
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.toX = iprot.readI16();
                struct.setToXIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TO_Y
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.toY = iprot.readI16();
                struct.setToYIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Jump_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(OBJECT_ID_FIELD_DESC);
        oprot.writeI16(struct.objectId);
        oprot.writeFieldEnd();
        if (struct.direction != null) {
          oprot.writeFieldBegin(DIRECTION_FIELD_DESC);
          oprot.writeI32(struct.direction.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FROM_X_FIELD_DESC);
        oprot.writeI16(struct.fromX);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(FROM_Y_FIELD_DESC);
        oprot.writeI16(struct.fromY);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TO_X_FIELD_DESC);
        oprot.writeI16(struct.toX);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TO_Y_FIELD_DESC);
        oprot.writeI16(struct.toY);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Jump_argsTupleSchemeFactory implements SchemeFactory {
      public Jump_argsTupleScheme getScheme() {
        return new Jump_argsTupleScheme();
      }
    }

    private static class Jump_argsTupleScheme extends TupleScheme<Jump_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Jump_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetObjectId()) {
          optionals.set(0);
        }
        if (struct.isSetDirection()) {
          optionals.set(1);
        }
        if (struct.isSetFromX()) {
          optionals.set(2);
        }
        if (struct.isSetFromY()) {
          optionals.set(3);
        }
        if (struct.isSetToX()) {
          optionals.set(4);
        }
        if (struct.isSetToY()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetObjectId()) {
          oprot.writeI16(struct.objectId);
        }
        if (struct.isSetDirection()) {
          oprot.writeI32(struct.direction.getValue());
        }
        if (struct.isSetFromX()) {
          oprot.writeI16(struct.fromX);
        }
        if (struct.isSetFromY()) {
          oprot.writeI16(struct.fromY);
        }
        if (struct.isSetToX()) {
          oprot.writeI16(struct.toX);
        }
        if (struct.isSetToY()) {
          oprot.writeI16(struct.toY);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Jump_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.objectId = iprot.readI16();
          struct.setObjectIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.direction = Direction.findByValue(iprot.readI32());
          struct.setDirectionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.fromX = iprot.readI16();
          struct.setFromXIsSet(true);
        }
        if (incoming.get(3)) {
          struct.fromY = iprot.readI16();
          struct.setFromYIsSet(true);
        }
        if (incoming.get(4)) {
          struct.toX = iprot.readI16();
          struct.setToXIsSet(true);
        }
        if (incoming.get(5)) {
          struct.toY = iprot.readI16();
          struct.setToYIsSet(true);
        }
      }
    }

  }

  public static class Jump_result implements org.apache.thrift.TBase<Jump_result, Jump_result._Fields>, java.io.Serializable, Cloneable, Comparable<Jump_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Jump_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Jump_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Jump_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Jump_result.class, metaDataMap);
    }

    public Jump_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Jump_result(Jump_result other) {
    }

    public Jump_result deepCopy() {
      return new Jump_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Jump_result)
        return this.equals((Jump_result)that);
      return false;
    }

    public boolean equals(Jump_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(Jump_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Jump_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class Jump_resultStandardSchemeFactory implements SchemeFactory {
      public Jump_resultStandardScheme getScheme() {
        return new Jump_resultStandardScheme();
      }
    }

    private static class Jump_resultStandardScheme extends StandardScheme<Jump_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Jump_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Jump_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Jump_resultTupleSchemeFactory implements SchemeFactory {
      public Jump_resultTupleScheme getScheme() {
        return new Jump_resultTupleScheme();
      }
    }

    private static class Jump_resultTupleScheme extends TupleScheme<Jump_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Jump_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Jump_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
