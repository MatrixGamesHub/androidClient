/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package rocks.matrixgames.android.mtxRendererService;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
public class LevelInfo implements org.apache.thrift.TBase<LevelInfo, LevelInfo._Fields>, java.io.Serializable, Cloneable, Comparable<LevelInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LevelInfo");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField GROUND_TEXTURE_FIELD_DESC = new org.apache.thrift.protocol.TField("groundTexture", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField WALL_TEXTURE_FIELD_DESC = new org.apache.thrift.protocol.TField("wallTexture", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LevelInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LevelInfoTupleSchemeFactory());
  }

  public String name; // required
  /**
   * 
   * @see GroundTexture
   */
  public GroundTexture groundTexture; // required
  /**
   * 
   * @see WallTexture
   */
  public WallTexture wallTexture; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    /**
     * 
     * @see GroundTexture
     */
    GROUND_TEXTURE((short)2, "groundTexture"),
    /**
     * 
     * @see WallTexture
     */
    WALL_TEXTURE((short)3, "wallTexture");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // GROUND_TEXTURE
          return GROUND_TEXTURE;
        case 3: // WALL_TEXTURE
          return WALL_TEXTURE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GROUND_TEXTURE, new org.apache.thrift.meta_data.FieldMetaData("groundTexture", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, GroundTexture.class)));
    tmpMap.put(_Fields.WALL_TEXTURE, new org.apache.thrift.meta_data.FieldMetaData("wallTexture", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, WallTexture.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LevelInfo.class, metaDataMap);
  }

  public LevelInfo() {
  }

  public LevelInfo(
    String name,
    GroundTexture groundTexture,
    WallTexture wallTexture)
  {
    this();
    this.name = name;
    this.groundTexture = groundTexture;
    this.wallTexture = wallTexture;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LevelInfo(LevelInfo other) {
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetGroundTexture()) {
      this.groundTexture = other.groundTexture;
    }
    if (other.isSetWallTexture()) {
      this.wallTexture = other.wallTexture;
    }
  }

  public LevelInfo deepCopy() {
    return new LevelInfo(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.groundTexture = null;
    this.wallTexture = null;
  }

  public String getName() {
    return this.name;
  }

  public LevelInfo setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  /**
   * 
   * @see GroundTexture
   */
  public GroundTexture getGroundTexture() {
    return this.groundTexture;
  }

  /**
   * 
   * @see GroundTexture
   */
  public LevelInfo setGroundTexture(GroundTexture groundTexture) {
    this.groundTexture = groundTexture;
    return this;
  }

  public void unsetGroundTexture() {
    this.groundTexture = null;
  }

  /** Returns true if field groundTexture is set (has been assigned a value) and false otherwise */
  public boolean isSetGroundTexture() {
    return this.groundTexture != null;
  }

  public void setGroundTextureIsSet(boolean value) {
    if (!value) {
      this.groundTexture = null;
    }
  }

  /**
   * 
   * @see WallTexture
   */
  public WallTexture getWallTexture() {
    return this.wallTexture;
  }

  /**
   * 
   * @see WallTexture
   */
  public LevelInfo setWallTexture(WallTexture wallTexture) {
    this.wallTexture = wallTexture;
    return this;
  }

  public void unsetWallTexture() {
    this.wallTexture = null;
  }

  /** Returns true if field wallTexture is set (has been assigned a value) and false otherwise */
  public boolean isSetWallTexture() {
    return this.wallTexture != null;
  }

  public void setWallTextureIsSet(boolean value) {
    if (!value) {
      this.wallTexture = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case GROUND_TEXTURE:
      if (value == null) {
        unsetGroundTexture();
      } else {
        setGroundTexture((GroundTexture)value);
      }
      break;

    case WALL_TEXTURE:
      if (value == null) {
        unsetWallTexture();
      } else {
        setWallTexture((WallTexture)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case GROUND_TEXTURE:
      return getGroundTexture();

    case WALL_TEXTURE:
      return getWallTexture();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case GROUND_TEXTURE:
      return isSetGroundTexture();
    case WALL_TEXTURE:
      return isSetWallTexture();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LevelInfo)
      return this.equals((LevelInfo)that);
    return false;
  }

  public boolean equals(LevelInfo that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_groundTexture = true && this.isSetGroundTexture();
    boolean that_present_groundTexture = true && that.isSetGroundTexture();
    if (this_present_groundTexture || that_present_groundTexture) {
      if (!(this_present_groundTexture && that_present_groundTexture))
        return false;
      if (!this.groundTexture.equals(that.groundTexture))
        return false;
    }

    boolean this_present_wallTexture = true && this.isSetWallTexture();
    boolean that_present_wallTexture = true && that.isSetWallTexture();
    if (this_present_wallTexture || that_present_wallTexture) {
      if (!(this_present_wallTexture && that_present_wallTexture))
        return false;
      if (!this.wallTexture.equals(that.wallTexture))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_groundTexture = true && (isSetGroundTexture());
    list.add(present_groundTexture);
    if (present_groundTexture)
      list.add(groundTexture.getValue());

    boolean present_wallTexture = true && (isSetWallTexture());
    list.add(present_wallTexture);
    if (present_wallTexture)
      list.add(wallTexture.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(LevelInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroundTexture()).compareTo(other.isSetGroundTexture());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroundTexture()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groundTexture, other.groundTexture);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWallTexture()).compareTo(other.isSetWallTexture());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWallTexture()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wallTexture, other.wallTexture);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LevelInfo(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("groundTexture:");
    if (this.groundTexture == null) {
      sb.append("null");
    } else {
      sb.append(this.groundTexture);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("wallTexture:");
    if (this.wallTexture == null) {
      sb.append("null");
    } else {
      sb.append(this.wallTexture);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private static class LevelInfoStandardSchemeFactory implements SchemeFactory {
    public LevelInfoStandardScheme getScheme() {
      return new LevelInfoStandardScheme();
    }
  }

  private static class LevelInfoStandardScheme extends StandardScheme<LevelInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LevelInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GROUND_TEXTURE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.groundTexture = GroundTexture.findByValue(iprot.readI32());
              struct.setGroundTextureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // WALL_TEXTURE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.wallTexture = WallTexture.findByValue(iprot.readI32());
              struct.setWallTextureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LevelInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.groundTexture != null) {
        oprot.writeFieldBegin(GROUND_TEXTURE_FIELD_DESC);
        oprot.writeI32(struct.groundTexture.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.wallTexture != null) {
        oprot.writeFieldBegin(WALL_TEXTURE_FIELD_DESC);
        oprot.writeI32(struct.wallTexture.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LevelInfoTupleSchemeFactory implements SchemeFactory {
    public LevelInfoTupleScheme getScheme() {
      return new LevelInfoTupleScheme();
    }
  }

  private static class LevelInfoTupleScheme extends TupleScheme<LevelInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LevelInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetGroundTexture()) {
        optionals.set(1);
      }
      if (struct.isSetWallTexture()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetGroundTexture()) {
        oprot.writeI32(struct.groundTexture.getValue());
      }
      if (struct.isSetWallTexture()) {
        oprot.writeI32(struct.wallTexture.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LevelInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.groundTexture = GroundTexture.findByValue(iprot.readI32());
        struct.setGroundTextureIsSet(true);
      }
      if (incoming.get(2)) {
        struct.wallTexture = WallTexture.findByValue(iprot.readI32());
        struct.setWallTextureIsSet(true);
      }
    }
  }

}

